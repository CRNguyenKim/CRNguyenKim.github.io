{"version":3,"sources":["helpers/colors.js","helpers/timeParser.js","components/APIToolbar.js","redux/actions/types.js","redux/reducers/dashboard.js","redux/reducers/auth.js","components/circleChart.js","redux/actions/error.js","redux/reducers/error.js","redux/store.js","redux/actions/dashboards.js","helpers/APIservices.js","components/generalChart.js","components/columnChart.js","components/CommentSection.js","redux/actions/auth.js","views/Home.js","components/Alerts.js","views/Login.js","App.js","serviceWorker.js","index.js"],"names":["secondaryDark","mainLight","ratingColors","extractFromTimestamp","timestamps","extractKey","map","time","t","Date","getHours","concat","getDate","getMonth","getFullYear","style","responsive","display","alignItems","rowOption","margin","selected","color","ICONS_MAP","DURATIONS","faCalendarAlt","TIMER","faStopwatch","LIMITS","faListOl","VIEWS","faEye","LOCATIONS","faMapMarkerAlt","RowOption","_this","this","props","data","length","dropdown","react_default","a","createElement","Form","Group","controlId","Col","xs","md","xl","sm","lg","index_es","icon","name","toUpperCase","Control","as","onChange","e","onOptionChange","target","value","backgroundColor","val","key","Row","Object","objectSpread","justifyContent","ButtonGroup","aria-label","Button","size","variant","selections","onClick","Component","ToolbarQuery","option","_this2","_this3","Container","fluid","keys","options","APIToolbar_RowOption","includes","faSyncAlt","d","Number","h","Math","floor","m","s","slice","secondsToHms","countdown","SET_MODES","SET_DURATIONS","SET_LIMITS","SET_TIMER","SET_VIEWS","SET_CATEGORIES","SET_LOCATIONS","SET_COUNTDOWN","SET_DATA","SET_SERIES","APPEND_SERIES","NODATA","UNAUTHORIZED","initialState","modes","durations","limits","views","timer","series","labels","locations","entityReducer","prefixName","arguments","undefined","state","action","type","payload","categories","updateInterval","token","localStorage","getItem","isAuthenticated","isLoading","user","auth","username","setItem","removeItem","ERRORS_HEADING","success","error","reducer","combineReducers","generalDashboard","entityDashboard","circleDashboard","columnDashboard","messages","store","createStore","applyMiddleware","thunk","setAPIOption","prefix","defineProperty","setData","setSeries","appendSeries","setTimeCountdown","tick","timestampKey","apiEndPoint","extractDataByKey","serialData","label","tickCountdown","chartName","axios","defaults","baseURL","Index","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getLocations","firstOption","get","params","headers","Authorization","getState","then","res","updateCountdown","update","resetTimer","dispatch","clearInterval","setInterval","newData","duration","location","all","updateDataByType","optionChange","dataError","chart","id","width","foreColor","fontFamily","fontSize","toolbar","show","tools","download","selection","zoom","zoomin","zoomout","pan","reset","fill","opacity","title","text","align","stroke","colors","theme","palette","plotOptions","pie","customScale","offsetX","offsetY","expandOnClick","dataLabels","offset","minAngleToShowLabel","donut","background","tooltip","enabled","obj","rated","limit","push","sort","b","max","apply","toConsumableArray","setState","catch","err","response","status","borderRadius","marginTop","flexDirection","APIToolbar","Badge","react_apexcharts_min_default","connect","strokeWidth","resetSeries","ApexChart","exec","kind","xaxis","yaxis","min","tickAmount","optionsMixedChart","curve","markers","strokeOpacity","hover","grid","borderColor","mode","legend","height","radius","minHeight","keyMap","avg","total","newSeries","overrideOptions","rating","lines","container","overflowY","maxHeight","sastisfactionIcon","faAngry","faFrown","faMeh","faSmile","faLaughBeam","Comment","date","toLocaleString","feedback","comments","position","top","ListGroup","ind","CommentSection_Comment","created_at","comment","brand","btn","border","circleChart","generalChart","columnChart","CommentSection_Index","react_router","to","AlertError","Alert","dismissible","onClose","Heading","heading","password","console","log","whiteSpace","padding","Alerts_AlertError","fullWidth","Label","placeholder","Text","className","post","App","Content-Type","react_router_dom","path","component","Login","exact","Home","Boolean","window","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13c377a7.chunk.js","sourcesContent":["export const mainDark = '#202534';\nexport const secondaryDark = '#303444';\nexport const colorScheme = '#971243';\nexport const mainLight = '#80deea';\nexport const colorGrid = '#78909c';\nexport const darkFade = '#3C495C'\n\nexport const gradient1 = 'rgba(160, 144, 223, 0.14)';\nexport const gradient2= 'rgba(223, 144, 215, 0.14)';\n\n\nexport const ratingColors = ['#af4448', '#ff8a65', '#ffd54f', '#aed581', '#00bfa5'];","const weekDays = ['Sun', 'Mon', 'Tues', 'Wed', 'Thu', 'Friday', 'Sat'];\nconst months = [\"Jan\", \"Feb\", \"Mar\",\"Apr\", \"May\",\"June\", \"July\", \"Aug\", \"Sep\", \"Oct\",\"Nov\",\"Dec\" ];\n\nexport const extractFromTimestamp = (timestamps, extractKey) => {\n\n    switch(extractKey){\n        case 'hour':\n            return timestamps.map( time => { \n                var t = new Date(time); \n                return  + t.getHours() > 12 ? t.getHours() + 'PM': t.getHours() + 'AM'  });\n\n        \n        case 'day':\n            return timestamps.map( time => { \n                var t = new Date(time);\n                return `${t.getDate()}/${t.getMonth()}`;}\n            )\n\n        \n        case 'month':\n            return timestamps.map( time => { \n                var t = new Date(time);\n                return `${( t.getMonth() + 1) % 12 === 0 ? 12 : (t.getMonth() + 1) % 12}/${t.getFullYear()}`\n            }\n        );\n\n\n        default:\n            break\n            \n    }\n}\n\nexport const secondsToHms = (d) => {\n    d = Number(d);\n\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n    var s = Math.floor(d % 3600 % 60);\n\n    return ('0' + h).slice(-2) + \":\" + ('0' + m).slice(-2) + \":\" + ('0' + s).slice(-2);\n}","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Row, Col, Form } from 'react-bootstrap';\nimport { mainLight, secondaryDark } from '../helpers/colors';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt, faStopwatch, faListOl, faEye, faSyncAlt, faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport { secondsToHms } from '../helpers/timeParser';\n\nconst style = {\n    responsive: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    rowOption: {\n        margin: '10px 0px 10px 0px'\n    },\n    selected: {\n        color: '#ffffff'\n    }\n}\n\nconst ICONS_MAP = {\n    'DURATIONS': faCalendarAlt,\n    'TIMER': faStopwatch,\n    'LIMITS': faListOl,\n    'VIEWS': faEye,\n    'LOCATIONS': faMapMarkerAlt\n}\n\n\nclass RowOption extends Component {\n    render() {\n        return (\n            this.props.data.length ?\n                this.props.dropdown ?\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                        <Col xs={3} md={3} xl={3} sm={3} lg={3} style={{ color: mainLight }}>\n                            <p style={{ margin: 0 }}> <FontAwesomeIcon icon={ICONS_MAP[this.props.name.toUpperCase()]} /> </p>\n                        </Col>\n\n                        <Form.Control as=\"select\" onChange={(e) => { this.props.onOptionChange(this.props.name, e.target.value) }}\n                            style={{ backgroundColor: secondaryDark, color: '#ffffff' }}>\n                            {\n                                this.props.data.map(val =>\n                                    (<option\n                                        key={val}>\n                                        {val}\n                                    </option>))\n                            }\n                        </Form.Control>\n\n\n                    </Form.Group>\n                    :\n                    <Row style={{ ...style.responsive, ...style.rowOption }}>\n                        <Col xs={3} md={3} xl={3} sm={3} lg={3} style={{ color: mainLight }}>\n                            <p style={{ margin: 0 }}> <FontAwesomeIcon icon={ICONS_MAP[this.props.name.toUpperCase()]} /> </p>\n                        </Col>\n                        <Col xs={9} md={9} xl={9} sm={9} lg={9} style={{ ...style.responsive, justifyContent: 'center' }}>\n                            <ButtonGroup aria-label=\"Basic example\">\n                                {\n                                    this.props.data &&\n                                    this.props.data.map(val =>\n                                        (<Button size='sm' variant='outline-info'\n                                            key={val}\n                                            style={this.props.selections[this.props.name] === val ? style.selected : null}\n                                            onClick={() => this.props.onOptionChange(this.props.name, val)} >\n                                            {val}\n                                        </Button>))\n                                }\n                            </ButtonGroup>\n                        </Col>\n                    </Row >\n                : ''\n        )\n    }\n}\n\n\nclass ToolbarQuery extends Component {\n\n\n    onOptionChange = (option, value) => {\n        this.props.onOptionChange(option, value)\n    }\n\n\n\n    render() {\n\n        const dropdown = this.props.dropdown ? this.props.dropdown : []\n        return (\n            <Container fluid>\n                <Row>\n                    <Col xs={12} sm={12} md={12} xl={8} lg={8}>\n                        {\n                            Object.keys(this.props.options).map((val) => {\n                                return <RowOption\n                                    name={val}\n                                    data={this.props.options[val]}\n                                    key={val}\n                                    onOptionChange={this.onOptionChange}\n                                    selections={this.props.selections}\n                                    dropdown={dropdown.includes(val)}\n\n                                />\n                            })\n                        }\n                    </Col>\n\n                    <Col xs={12} sm={12} md={12} xl={4} lg={4}>\n                        <Row style={{ ...style.responsive, ...style.rowOption }}>\n                            <Col xs={3} md={3} xl={3} sm={3} lg={3} style={{ color: mainLight, ...style.responsive, }}>\n                                <p style={{ margin: 0 }}> <FontAwesomeIcon icon={faSyncAlt} />  </p>\n                            </Col>\n                            <Col xs={9} md={9} xl={9} sm={9} lg={9} style={{ color: mainLight, ...style.responsive, justifyContent: 'center' }}>\n                                <p style={{ margin: 0 }}>{secondsToHms(this.props.countdown)}</p>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default ToolbarQuery;\n\n","/****** Toolbar ********/\nexport const SET_MODES = 'SET_MODES';\nexport const SET_DURATIONS = 'SET_DURATIONS';\nexport const SET_LIMITS = 'SET_LIMITS';\nexport const SET_TIMER = 'SET_TIMER';\nexport const SET_VIEWS = 'SET_VIEWS';\nexport const SET_CATEGORIES = 'SET_CATEGORIES';\nexport const SET_LOCATIONS = 'SET_LOCATIONS';\n\n// flow control\nexport const SET_COUNTDOWN = 'SET_COUNTDOWN';\n\n// Series data\nexport const SET_DATA = 'SET_DATA';\nexport const SET_LABELS = 'SET_LABELS';\nexport const SET_SERIES = 'SET_SERIES';\nexport const APPEND_SERIES = 'APPEND_SERIES';\n\n\n/****** AUTHENTCATION ******/\n\nexport const USER_LOADED = 'USER_LOAD';\nexport const USER_LOGOUT = 'USER_LOGOUT';\nexport const USER_LOADING = 'USER_LOADING';\n\n\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\n\n\nexport const AUTH_ERROR = 'AUTH_ERROR';\n\n/****** ERRORs *******/\nexport const GET_ERROR = 'GET_ERROR';\nexport const GET_SUCCESS = 'GET_SUCCESS';\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES';\n\n\n\nexport const NODATA = 'NODATA';\nexport const UNAUTHORIZED = 'UNAUTHORIZED';\n\n\n\n","import { SET_DATA, SET_MODES, SET_DURATIONS, SET_LIMITS, SET_TIMER, SET_VIEWS, SET_CATEGORIES, SET_SERIES, APPEND_SERIES, SET_LOCATIONS, SET_COUNTDOWN } from '../actions/types';\n\n\nconst initialState = {\n    modes: '',\n    durations: '',\n    limits: '',\n    views: '',\n    timer: '',\n    series: [],\n    data: [],\n    labels: [],\n    locations: []\n}\n\n\nexport default function entityReducer(prefixName=''){\n    \n    return function reducer(state = initialState, action) {\n\n        switch (action.type) {\n            \n            case prefixName + SET_MODES:\n                return {\n                    ...state,\n                    modes: action.payload.modes\n                }\n\n            case prefixName + SET_DURATIONS:\n                return {\n                    ...state,\n                    durations: action.payload.durations\n                }\n\n            case prefixName + SET_LIMITS:\n                return {\n                    ...state,\n                    limits: action.payload.limits\n                }\n\n\n            case prefixName + SET_VIEWS:\n                return {\n                    ...state,\n                    views: action.payload.views\n                }\n\n            case prefixName + SET_TIMER:\n                return {\n                    ...state,\n                    timer: action.payload.timer\n                }\n\n            case prefixName + SET_DATA:\n                return {\n                    ...state,\n                    data: action.payload.data\n                }\n\n            case prefixName + SET_CATEGORIES:\n                return {\n                    ...state,\n                    categories: action.payload.categories\n                }\n\n            case prefixName + SET_SERIES:\n                return {\n                    ...state,\n                    series: action.payload.series\n                }\n            \n            case prefixName + APPEND_SERIES:\n                return {\n                    ...state,\n                    series: state.series.concat(action.payload.data)\n                }\n            \n            case prefixName + SET_LOCATIONS:\n                return {\n                    ...state,\n                    locations : action.payload.locations\n                }\n            \n            case prefixName + SET_COUNTDOWN:\n                return{\n                    ...state,\n                    countdown : action.payload.countdown\n                }\n\n            default:\n                return state\n        }\n    }\n}\n\n","import { USER_LOADING, USER_LOADED, USER_LOGOUT, LOGIN_FAILED, LOGIN_SUCCESS } from '../actions/types';\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: !!localStorage.getItem('token'),\n    isLoading: false,\n    user: null\n}\n\nconst auth = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            }\n\n        case USER_LOADED:       \n            return {\n                ...state,\n                isLoading: false,\n                isAuthenticated: true,\n                user: action.payload.username\n            }; \n\n        case LOGIN_SUCCESS:\n            localStorage.setItem('token', action.payload.token)\n            return {\n                ...state,\n                token: action.payload.token,\n                isLoading: false,\n                isAuthenticated: true,\n                user: action.payload.username\n            }\n\n        case LOGIN_FAILED:\n        case USER_LOGOUT:\n            localStorage.removeItem('token')\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default auth;\n","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\nimport { mainLight, secondaryDark } from '../helpers/colors';\nimport ToolbarQuery from './APIToolbar';\n\nimport { Badge } from 'react-bootstrap';\nimport { NODATA, UNAUTHORIZED } from '../redux/actions/types';\n\n\n//calling API\nimport axios from 'axios';\n\n\n//redux state handling\nimport store from '../redux/store';\nimport { setAPIOption, setData } from '../redux/actions/dashboards';\nimport { connect } from 'react-redux';\nimport { setTimeCountdown } from '../redux/actions/dashboards'\nimport { extractDataByKey, apiEndPoint, APIkey } from '../helpers/APIservices';\n\n//state template\nvar tickCountdown = 10;\nvar updateInterval;\nconst chartName = 'circleChart';\naxios.defaults.baseURL = 'https://nk-asp.herokuapp.com';\n\nconst options = {\n    durations: ['day', 'month'],\n    timer: [10, 60, 3600],\n    locations: []\n}\n\n\nclass Index extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataError: '',\n            data: [],\n            options: {\n                labels: ['rating 1', 'rating 2', 'rating 3', 'rating 4', 'rating 5'],\n                chart: {\n                    id: chartName,\n                    width: '60%',\n                    foreColor: mainLight,\n                    fontFamily: 'Helvetica, Arial, sans-serif',\n                    fontSize: 800,\n                    toolbar: {\n                        show: true,\n                        tools: {\n                            download: true,\n                            selection: true,\n                            zoom: true,\n                            zoomin: true,\n                            zoomout: true,\n                            pan: true,\n                            reset: true\n                        }\n                    },\n                },\n                fill: {\n                    opacity: 0.9,\n                },\n                title: {\n                    text: 'Customer Rating Percentage',\n                    align: 'left'\n                },\n                stroke: {\n                    colors: ['transparent']\n                },\n                theme: {\n                    palette: 'palette1',\n                },\n                plotOptions: {\n                    pie: {\n                        customScale: 1,\n                        offsetX: 0,\n                        offsetY: 0,\n                        expandOnClick: true,\n                        dataLabels: {\n                            offset: 0,\n                            minAngleToShowLabel: 10\n                        },\n                        donut: {\n                            size: '55%',\n                            background: 'transparent',\n                        },\n                    }\n                },\n                tooltip: {\n                    enabled: false\n                }\n            }\n        }\n    }\n\n\n\n    getLocations = () => {\n        var firstOption = 'all';\n        axios.get(`${apiEndPoint}/location?`,\n            {\n                params: {},\n                headers: {\n                    \"Authorization\": `Bearer ${store.getState().auth.token}`\n                }\n            })\n            .then(res => res.data.data)\n            .then(data => {\n                options.locations = [firstOption].concat(extractDataByKey(data, 'location'));\n            })\n    }\n\n    componentDidMount() {\n        this.getLocations()\n        Object.keys(options).map(obj => store.dispatch(setAPIOption(obj, options[obj][0], chartName)))\n        this.update()\n        this.resetTimer()\n    }\n\n\n    updateDataByType(type, duration = 'hour', newData, location = '') {\n        const limit = 1;\n        const selection = 'total'\n        axios.get(`${apiEndPoint}/${selection}?`,\n            {\n                params: {\n                    rated: type,\n                    duration: duration,\n                    limit: limit,\n                    location: location\n                },\n                headers: {\n                    \"Authorization\": `Bearer ${this.props.auth.token}`\n                }\n            }\n        )\n            .then(res => res.data.data)\n            .then(res => {\n                const data = extractDataByKey(res, selection)[0];\n                newData.push({ data: data, name: type })\n                if (newData.length === 5) {\n                    newData.sort((a, b) => (a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0));\n                    // ApexCharts.exec(chartName, 'updateSeries', extractDataByKey(newData, 'data'), chartName);\n                    store.dispatch(setData(extractDataByKey(newData, 'data'), chartName))\n\n                    //Check data is empty?\n                    if (Math.max(...newData.map(obj => obj.data)) === 0)\n                        this.setState({\n                            dataError: NODATA\n                        })\n                    else\n                        this.setState({\n                            dataError: ''\n                        })\n                    \n\n                }\n\n            })\n            .catch(err => {\n                if(err.response.status === 401){\n                    this.setState({\n                        dataError: UNAUTHORIZED\n                    })\n                }\n            })\n\n    }\n\n    updateCountdown = () => {\n        if (tickCountdown === 0) {\n            this.update();\n            this.resetTimer()\n        }\n        else\n            tickCountdown -= 1\n        store.dispatch(setTimeCountdown(tickCountdown, chartName))\n    }\n\n    resetTimer = () => {\n        if (updateInterval)\n            clearInterval(updateInterval);\n        tickCountdown = store.getState().circleDashboard.timer;\n        updateInterval = setInterval(this.updateCountdown, 1000)\n    }\n\n    update = () => {\n        var newData = []\n\n        let duration = store.getState().circleDashboard.durations ? store.getState().circleDashboard.durations : options['durations'][0]\n        let location = store.getState().circleDashboard.locations ? store.getState().circleDashboard.locations : options['locations'][0]\n        if (location === 'all') {\n            location = ''\n        }\n        axios.all(\n            [1, 2, 3, 4, 5].map(val =>\n                this.updateDataByType(val, duration, newData, location))\n        )\n    }\n\n    optionChange = (option, value) => {\n        store.dispatch(setAPIOption(option, value, chartName));\n\n        this.update();\n        this.resetTimer();\n\n    }\n\n    componentWillUnmount() {\n        if (updateInterval)\n            clearInterval(updateInterval)\n    }\n    render(props) {\n        return (\n            <div style={{ borderRadius: 0, marginTop: 10, display: 'flex', flexDirection: 'column', background: secondaryDark }}>\n                <ToolbarQuery\n                    options={options}\n                    selections={this.props.options}\n                    onOptionChange={this.optionChange}\n                    dropdown={['locations']}\n                    countdown={tickCountdown}\n                />\n                {\n                    this.state.dataError === UNAUTHORIZED &&\n                    <Badge variant=\"danger\">Couldn't retrieve data from sever. Make sure your account is admin account!</Badge>\n                }\n                {\n                    this.state.dataError === NODATA &&\n                    <Badge variant=\"secondary\">Data is empty!</Badge>\n                }\n                <Chart options={this.state.options} series={this.props.options.data} type='donut' />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => (\n    {\n        options: state.circleDashboard,\n        auth: state.auth\n    }\n)\n\nexport default connect(mapStateToProps)(Index);","import {GET_ERROR,  GET_SUCCESS, CLEAR_MESSAGES} from './types';\nexport const ERRORS = ['loginFailed', 'severError'];\n\nexport const ERRORS_HEADING = {\n    loginFailed : 'Authentication Error !',\n    severError : 'Server error!',\n}\n\nexport const returnError = (error, messages) => {\n\n    return {\n        type: GET_ERROR,\n        payload:{\n            [error]: messages\n        }\n    }\n}\n\nexport const returnSuccess = (success, messages) => {\n    return {\n        type: GET_SUCCESS,\n        payload:{\n            [success]: messages\n        }\n    }\n}\n\nexport const clearMessages = () => {\n    return {\n        type: CLEAR_MESSAGES,\n        payload:{}\n    }\n}","import {GET_ERROR, GET_SUCCESS, CLEAR_MESSAGES} from '../actions/types';\nimport {ERRORS} from '../actions/error'\n\nvar initialState = {\n    success: {},\n    error: {}\n}\n\n\n\n\nconst reducer = (state = initialState, action) => {\n\n    switch(action.type){\n\n        case GET_ERROR:\n            return{\n                ...state,\n                error: action.payload\n            }\n        \n        case GET_SUCCESS:\n            return{\n                ...state,\n                success: action.payload\n            }\n\n        case CLEAR_MESSAGES:\n            return{\n                error: {},\n                success: {}\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default reducer;","import entityDashboard from './reducers/dashboard';\nimport auth from './reducers/auth';\nimport error from './reducers/error'\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\n\nconst reducer = combineReducers({generalDashboard: entityDashboard('generalChart'), circleDashboard: entityDashboard('circleChart'), columnDashboard: entityDashboard('columnChart'), auth: auth, messages:error});\nconst store = createStore(reducer, {}, applyMiddleware(thunk));\nexport default store;","import { SET_DATA, SET_LABELS, SET_SERIES, APPEND_SERIES, SET_COUNTDOWN } from './types';\n\n\n\nexport const setAPIOption = (option, value, prefix) => {\n    return {\n        type: `${prefix}SET_${option.toUpperCase()}`,\n        payload:{\n            [option] : value\n        }\n    }\n}\n\n\nexport const setData = (data, prefix) => {\n    return {\n        type: prefix+SET_DATA,\n        payload:{\n            data: data\n        }\n    }\n}\n\nexport const setSeries = (series, prefix) => {\n    return {\n        type: prefix+SET_SERIES,\n        payload:{\n            series: series\n        }\n    }\n}\n\nexport const appendSeries = (data, prefix) => {\n    return{\n        type: prefix+APPEND_SERIES,\n        payload:{\n            data : data\n        }\n    }\n}\n\n\nexport const setLabels = (labels, prefix) => {\n    return {\n        type: prefix+SET_LABELS,\n        payload:{\n            labels : labels,\n        }\n    }\n}\n\nexport const setTimeCountdown = (tick, prefix) => {\n    return {\n        type:prefix+SET_COUNTDOWN,\n        payload:{\n            countdown: tick\n        }\n    }\n}","\nexport const APIoptions = {\n\n    modes: ['average', 'sum'],\n    durations: ['hour', 'month', 'day'],\n    limits: [7, 12, 24],\n    timers: [30, 60, 3600],\n    views: ['area', 'line'],\n    locations: [],\n    categories: [],\n\n};\n\nexport const APIversion = 'v1'\nexport const timestampKey = 'day';\nexport const apiEndPoint = `/api/dashboard`;\n\nexport const extractDataByKey = (data, key) => {\n    const res = data.map(val =>  val[key]);\n    return res\n}\n\nexport const serialData = (data, label, display) => {\n    // return list object representation to work with APEX\n    return {\n        data: data,\n        name: label,\n        type: display\n    }\n}\n\nexport const extractFromTimestamp = (timestamps, extractKey) => {\n\n    switch(extractKey){\n        case 'hour':\n            return timestamps.map( time => { \n                var t = new Date(time); \n                return t.getHours()});\n\n        \n        case 'day':\n            return timestamps.map( time => { \n                var t = new Date(time);\n                return t.getDay()});\n\n        \n        case 'month':\n            return timestamps.map( time => { \n                var t = new Date(time);\n                return t.getMonth()});\n\n\n        default:\n            break      \n    }\n}\n","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\nimport ApexChart from 'apexcharts';\nimport { secondaryDark, mainLight } from '../helpers/colors';\nimport ToolbarQuery from './APIToolbar';\nimport axios from 'axios';\nimport {Badge} from 'react-bootstrap'\n\n\n\nimport { connect } from 'react-redux';\nimport store from '../redux/store';\nimport { setAPIOption, appendSeries, setData, setTimeCountdown } from '../redux/actions/dashboards';\nimport { extractDataByKey, serialData, timestampKey, apiEndPoint } from '../helpers/APIservices';\nimport { extractFromTimestamp } from '../helpers/timeParser';\n\nimport {NODATA, UNAUTHORIZED} from '../redux/actions/types';\n\n//state template\naxios.defaults.baseURL = 'https://nk-asp.herokuapp.com';\n\nconst chartName = 'generalChart';\nconst strokeWidth = 2;\n\nvar updateInterval;\nvar tickCountdown = 10;\n\nconst options = {\n    modes: [],\n    durations: ['hour', 'day', 'month'],\n    limits: [7, 12, 24],\n    timer: [10, 60, 3600],\n    views: ['area', 'line'],\n    categories: [],\n}\n\nclass Index extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataError: '',\n            countdown: '',\n            series: [],\n            optionsMixedChart: {\n                chart: {\n                    width: '100%',\n                    background: secondaryDark,\n                    id: chartName,\n                },\n                title: {\n                    text: 'Average customer rating over time',\n                    align: 'center'\n                },\n                colors: [mainLight],\n\n                stroke: {\n                    width: strokeWidth,\n                    opacity: 1,\n                    curve: 'smooth'\n                },\n                markers: {\n                    size: 0,\n                    strokeWidth: 1,\n                    strokeOpacity: 1,\n                    hover: {\n                        size: 4\n                    }\n                },\n                yaxis: {\n                    tickAmount: 5,\n                    min: 0,\n                    max: 5\n                },\n                grid: {\n                    borderColor: '#40475D',\n                },\n                theme: {\n                    mode: 'dark',\n                },\n\n                legend: {\n                    offsetX: 0,\n                    offsetY: -20,\n                    height: 30,\n                    markers: {\n                        width: 20,\n                        height: 10,\n                        radius: 12,\n                    }\n                },\n                fill: {\n                    opacity: 0.7\n                }\n            },\n        }\n\n    }\n\n\n    componentDidMount(props) {\n        Object.keys(options).map((obj) => store.dispatch(setAPIOption(obj, options[obj][0], chartName)));\n        this.updateDataByType(options['modes'][0], 1, options['durations'][0], options['limits'][0])\n        this.resetTimer()\n    }\n\n    resetSeries = () => {\n        ApexChart.exec(chartName, 'resetSeries')\n    }\n\n    updateDataByType = (kind = null, rated = null, duration = null, limit = null) => {\n        axios.get(`${apiEndPoint}/avg?`,\n            {\n                params: {\n                    rated: rated,\n                    duration: duration,\n                    limit: limit\n                },\n                headers: {\n                    \"Authorization\": `Bearer ${this.props.auth.token}`\n                }\n            })\n            .then(res => res.data.data)\n            .then(res => {\n                const data = extractDataByKey(res, 'average');\n                const timestamps = extractDataByKey(res, timestampKey);\n                const categories = extractFromTimestamp(timestamps, duration)\n                const series = serialData(data, 'rating AVG', store.getState().generalDashboard.views);\n                store.dispatch(appendSeries(series, chartName));\n                // update ApexChart\n                try {\n                    ApexChart.exec(chartName, 'updateOptions', {\n                        xaxis: {\n                            categories: categories\n                        }\n                    });\n\n                    if (kind === 'avg') {\n                        ApexChart.exec(chartName, 'updateOptions', {\n                            yaxis: {\n                                min: 0,\n                                tickAmount: 5,\n                                max: 5\n                            }\n                        })\n                    }\n                }\n                catch (err){}\n                store.dispatch(setData([series], chartName))\n                \n                //catching empty data\n                if(Math.max(...data) === 0)\n                    this.setState({\n                        dataError: NODATA\n                    })\n                else\n                    this.setState({\n                        dataError: ''\n                    })\n\n               \n            })\n            .catch(err => {\n                if(err.response.status === 401){\n                    this.setState({\n                        dataError: UNAUTHORIZED\n                    })\n                }\n            })\n\n    }\n\n\n    updateCountdown = () => {\n        if (tickCountdown === 0) {\n            this.update();\n            this.resetTimer()\n        }\n        else\n            tickCountdown -= 1\n        store.dispatch(setTimeCountdown(tickCountdown, chartName))\n    }\n\n    resetTimer = () => {\n        if (updateInterval)\n            clearInterval(updateInterval);\n        tickCountdown = store.getState().generalDashboard.timer;\n        updateInterval = setInterval(this.updateCountdown, 1000);\n\n    }\n\n    update = () => {\n        this.updateDataByType(\n            store.getState().generalDashboard.modes,\n            1,\n            store.getState().generalDashboard.durations,\n            store.getState().generalDashboard.limits\n        )\n    }\n\n\n    optionChange = (option, value) => {\n        store.dispatch(setAPIOption(option, value, chartName));\n        this.update()\n        this.resetTimer()\n    }\n    componentWillUnmount(){\n        if(updateInterval)\n            clearInterval(updateInterval)\n    }\n\n    render(props) {\n        return (\n            <div style={{ borderRadius: 0, marginTop: 10, display: 'flex', flexDirection: 'column', background: secondaryDark, minHeight: '45vw' }}>\n                <ToolbarQuery onOptionChange={this.optionChange} options={options} selections={this.props.options} countdown={this.props.options.countdown} />\n                {\n                    this.state.dataError === UNAUTHORIZED && \n                    <Badge variant=\"danger\">Couldn't retrieve data from sever. Make sure your account is admin account!</Badge>\n                }\n                {\n                    this.state.dataError === NODATA &&\n                    <Badge variant=\"secondary\">Data is empty!</Badge>\n                }\n                <Chart options={this.state.optionsMixedChart}\n                       series={this.props.options.data}\n                       type='line' />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => (\n    {\n        options: state.generalDashboard,\n        auth: state.auth\n    }\n)\nexport default connect(mapStateToProps)(Index);\n","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\nimport ApexChart from 'apexcharts';\nimport { secondaryDark, ratingColors } from '../helpers/colors';\nimport ToolbarQuery from './APIToolbar';\nimport axios from 'axios';\n\nimport { connect } from 'react-redux';\nimport store from '../redux/store';\nimport { setAPIOption, appendSeries, setSeries, setTimeCountdown } from '../redux/actions/dashboards';\nimport { extractDataByKey, serialData, timestampKey, apiEndPoint } from '../helpers/APIservices';\nimport { extractFromTimestamp } from '../helpers/timeParser';\n\nimport { Badge } from 'react-bootstrap';\nimport { NODATA, UNAUTHORIZED } from '../redux/actions/types';\n\n//state template\naxios.defaults.baseURL = 'https://nk-asp.herokuapp.com';\n\n\nconst chartName = 'columnChart';\nconst strokeWidth = 2;\n\nvar tickCountdown = 10;\nvar updateInterval;\n\nvar options = {\n    modes: [],\n    durations: ['hour', 'day', 'month'],\n    limits: [7, 12, 24],\n    timer: [10, 60, 3600],\n    views: ['column', 'area', 'line'],\n\n}\n\n\n\n\n\nclass Index extends Component {\n\n    constructor(props) {\n        super(props);\n\n\n        this.state = {\n            dataError: '',\n            locations: [],\n            series: [],\n            optionsMixedChart: {\n                chart: {\n                    width: '100%',\n                    background: secondaryDark,\n                    id: chartName,\n                },\n                title: {\n                    text: 'Total customer rating over time',\n                    align: 'center'\n                },\n                colors: ratingColors,\n                stroke: {\n                    width: strokeWidth,\n                    opacity: 1,\n                    curve: 'smooth'\n                },\n                markers: {\n                    size: 0,\n                    strokeWidth: 1,\n                    strokeOpacity: 1,\n                    hover: {\n                        size: 4\n                    }\n                },\n                yaxis: {\n                    tickAmount: 5,\n                    min: 0,\n                    max: 5\n                },\n                grid: {\n                    borderColor: '#40475D',\n                    xaxis: {\n                        lines: {\n                            show: true\n                        }\n                    },\n                },\n                theme: {\n                    mode: 'dark',\n                },\n                legend: {\n                    offsetX: 0,\n                    offsetY: -10,\n                    height: 50,\n                    markers: {\n                        width: 25,\n                        height: 20,\n                        radius: 5,\n                    }\n                },\n                fill: {\n                    opacity: 0.7\n                },\n                dataLabels: {\n                    enabled: false,\n                }\n            },\n        }\n\n    }\n\n\n    componentDidMount(props) {\n        this.getLocations();\n        Object.keys(options).map((obj) => store.dispatch(setAPIOption(obj, options[obj][0], chartName)));\n        store.dispatch(setAPIOption('durations', options['durations'][0], chartName))\n        this.update()\n        this.resetTimer()\n    }\n\n    getLocations = () => {\n        axios.get(`${apiEndPoint}/location?`,\n            {\n                params: {},\n                headers: {\n                    \"Authorization\": `Bearer ${this.props.auth.token}`\n                }\n            })\n            .then(res => res.data.data)\n            .then(data => {\n                options.locations = extractDataByKey(data, 'location');\n                if (Math.max(...data) === 0)\n                    this.setState({\n                        dataError: NODATA\n                    })\n                else\n                    this.setState({\n                        dataError: ''\n                    })\n            })\n            .catch(err => {\n                if(err.response.status === 401){\n                    this.setState({\n                        dataError: UNAUTHORIZED\n                    })\n                }\n            })\n    }\n\n\n    updateDataByType = (kind = null, type = null, duration = null, limit = null, location = null) => {\n        const keyMap = {\n            'avg': 'average',\n            'total': 'total',\n        }\n\n        axios.get(`${apiEndPoint}/${kind}?`,\n            {\n                params: {\n                    rated: type,\n                    duration: duration,\n                    limit: limit,\n                    location: location\n                },\n                headers: {\n                    \"Authorization\": `Bearer ${this.props.auth.token}`\n                }\n            })\n            .then(res => res.data.data)\n            .then(res => {\n                const data = extractDataByKey(res, keyMap[kind]);\n                const timestamps = extractDataByKey(res, timestampKey);\n                const categories = extractFromTimestamp(timestamps, duration)\n                const series = serialData(data, 'rating ' + type, store.getState().columnDashboard.views);\n                store.dispatch(appendSeries(series, chartName));\n\n                // update ApexChart\n                try {\n                    ApexChart.exec(chartName, 'updateOptions', {\n                        xaxis: {\n                            categories: categories\n                        }\n                    });\n                    if (kind === 'avg') {\n                        ApexChart.exec(chartName, 'updateOptions', {\n                            yaxis: {\n                                min: 0,\n                                tickAmount: 5,\n                                max: 5\n                            }\n                        })\n                    }\n\n\n                    else {\n                        if (this.props.options.series.length === 5) {\n                            ApexChart.exec(chartName, 'updateOptions', {\n                                yaxis: {\n                                    min: 0,\n                                    tickAmount: 5,\n                                    max: Math.max(...this.props.options.series.map((obj) => Math.max(...obj.data)))\n                                }\n                            })\n                        }\n                    }\n                }\n                catch (err) {\n\n                }\n                if (this.props.options.series.length === 5) {\n                    const newSeries = this.props.options.series.sort((a, b) => (a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0))\n                    ApexChart.exec(chartName, 'updateSeries', newSeries)\n                    this.setState({\n                        series: newSeries\n                    })\n                }\n            })\n\n    }\n\n    updateCountdown = () => {\n        if (tickCountdown === 0) {\n            this.update();\n            this.resetTimer()\n        }\n        else\n            tickCountdown -= 1\n        store.dispatch(setTimeCountdown(tickCountdown, chartName))\n    }\n\n    resetTimer = () => {\n        if (updateInterval)\n            clearInterval(updateInterval);\n        tickCountdown = store.getState().columnDashboard.timer;\n        updateInterval = setInterval(this.updateCountdown, 1000)\n    }\n\n    update = () => {\n\n        const overrideOptions = {\n            modes: 'total'\n        }\n\n        axios.all(\n            [1, 2, 3, 4, 5].map(rating => this.updateDataByType(\n                overrideOptions.modes,\n                rating,\n                store.getState().columnDashboard.durations,\n                store.getState().columnDashboard.limits,\n                store.getState().columnDashboard.locations,\n            ))\n        )\n            .then(res => store.dispatch(setSeries([], chartName)))\n\n    }\n\n    optionChange = (option, value) => {\n        store.dispatch(setAPIOption(option, value, chartName));\n        this.update()\n        this.resetTimer()\n\n    }\n    componentWillUnmount() {\n        if (updateInterval)\n            clearInterval(updateInterval)\n    }\n    render(props) {\n        return (\n            <div style={{ borderRadius: 0, marginTop: 10, display: 'flex', flexDirection: 'column', background: secondaryDark, minHeight: '45vw' }}>\n                <ToolbarQuery\n                    onOptionChange={this.optionChange}\n                    options={options}\n                    selections={this.props.options}\n                    dropdown={['locations']}\n                    countdown={this.props.options.countdown}\n                />\n                {\n                    this.state.dataError === UNAUTHORIZED &&\n                    <Badge variant=\"danger\">Couldn't retrieve data from sever. Make sure your account is admin account!</Badge>\n                }\n                {\n                    this.state.dataError === NODATA &&\n                    <Badge variant=\"secondary\">Data is empty!</Badge>\n                }\n                <Chart options={this.state.optionsMixedChart} series={this.state.series} type='bar' />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => (\n    {\n        options: state.columnDashboard,\n        auth: state.auth\n    }\n)\nexport default connect(mapStateToProps)(Index);\n","import React, { Component } from 'react';\nimport { Container, ListGroup, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLaughBeam, faSmile, faMeh, faFrown, faAngry } from '@fortawesome/free-solid-svg-icons';\nimport { secondaryDark, mainLight } from '../helpers/colors';\nimport { Badge } from 'react-bootstrap';\nimport { NODATA, UNAUTHORIZED } from '../redux/actions/types';\n\n\nimport { } from '../helpers/timeParser';\n\nimport axios from 'axios';\naxios.defaults.baseURL = 'https://nk-asp.herokuapp.com';\n\n\nconst style = {\n    container: {\n        overflowY: 'scroll',\n        maxHeight: '20rem',\n        backgroundColor: secondaryDark,\n        color: '#aaaaaa'\n    }\n}\n\nvar updateInterval;\n\nconst limit = 20;\nconst sastisfactionIcon = [faAngry, faFrown, faMeh, faSmile, faLaughBeam];\n\nconst Comment = (props) => {\n    let d = new Date(props.date);\n\n    return <p > {d.toLocaleString()} <FontAwesomeIcon icon={sastisfactionIcon[props.rated - 1]} /> {props.feedback} </p>\n}\n\nexport default class Index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataError: '',\n            comments: []\n        }\n    }\n    componentDidMount() {\n        this.update()\n        updateInterval = setInterval(this.update, 1000);\n    }\n\n    update = () => {\n\n        axios.get(\n            'api/dashboard/comment?',\n            {\n                params: {\n                    limit: limit\n                },\n                headers: {\n                    \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n                }\n            }\n        )\n            .then(res => res.data.data)\n            .then(data => {\n                this.setState({ comments: data });\n                // this.state.comments.map(obj =>  <Comment rated={obj.rated} feedback={obj.comment} />  )\n                if (data.length === 0)\n                    this.setState({\n                        dataError: NODATA\n                    })\n                else\n                    this.setState({\n                        dataError: ''\n                    })\n            })\n            .catch(err => {\n                if(err.response.status === 401){\n                    this.setState({\n                        dataError: UNAUTHORIZED\n                    })\n                }\n            })\n    }\n\n    componentWillUnmount() {\n        if (updateInterval)\n            clearInterval(updateInterval)\n    }\n    render() {\n\n        return (\n            <Container >\n                <Row>\n                    <div style={{ position: 'sticky', top: 0, background: secondaryDark, width: '90%', height: '10%', color: mainLight }}>\n                        <h3> Recent comments </h3>\n                    </div>\n                </Row>\n                <Row style={{ ...style.container, maxHeight: '30vw' }}>\n                    <ListGroup variant='flush' >\n                        {\n                            this.state.dataError === UNAUTHORIZED &&\n                            <Badge variant=\"danger\">Couldn't retrieve data from sever. Make sure your account is admin account!</Badge>\n                        }\n                        {\n                            this.state.dataError === NODATA &&\n                            <Badge variant=\"secondary\">Data is empty!</Badge>\n                        }\n                        {this.state.comments.map((obj, ind) => <Comment date={obj.created_at} rated={obj.rated} feedback={obj.comment} key={ind} />)}\n                    </ListGroup>\n                </Row>\n            </Container>\n        )\n    }\n}","import axios from 'axios';\nimport { USER_LOADING, USER_LOGOUT, USER_LOADED, LOGIN_SUCCESS, GET_ERROR } from './types';\nimport { ERRORS_HEADING } from './error'\naxios.defaults.baseURL = 'https://nk-asp.herokuapp.com';\n// axios.defaults.headers.common['Content-Type'] = 'application/x-www-form-urlencoded';\n\nexport const loadAdmin = () => (dispatch, getState) => {\n\n    dispatch({ type: USER_LOADING });\n    const token = getState().auth.token;\n\n    axios.get('/api/auth/user', {\n        params: {},\n        headers: {\n            'Content-Type':'aplication/json',\n            'Authorization': `Bearer ${token}`\n        }\n    })\n        .then(res =>{\n            dispatch({\n                type: USER_LOADED,\n                payload: res.data\n            });\n        })\n        .catch(err => {\n            if (!err.response)\n                dispatch({\n                    type: GET_ERROR,\n                    payload: {\n                        [ERRORS_HEADING.severError]: 'Sever is not responding!'\n                    }\n                })\n        }\n    )\n}\n\nexport const login = (username, password) => dispatch => {\n\n    axios.post(\n        'api/auth/login',\n        {\n            username: username,\n            password: password,\n        }\n    )\n        .then(res => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            });\n        })\n        .catch(err => {\n            if (err.response)\n                dispatch({\n                    type: GET_ERROR,\n                    payload: {\n                        [ERRORS_HEADING.loginFailed]: \"Invalid login or password\"\n                    }\n                })\n            else\n                dispatch({\n                    type: GET_ERROR,\n                    payload: {\n                        [ERRORS_HEADING.severError]: 'Sever is not responding!'\n                    }\n                })\n        }\n        )\n}\n\nexport const logout = () => (dispatch, getState) => {\n\n    dispatch({\n        type: USER_LOGOUT\n    })\n\n}","import React from 'react';\nimport { Col, Row, Container, Button} from 'react-bootstrap';\nimport { connect } from 'react-redux';\n// Charts\nimport PercentageChart from '../components/circleChart';\nimport LineChart from '../components/generalChart';\nimport ColumnChart from '../components/columnChart';\nimport CommentSection from '../components/CommentSection';\n\n\nimport { mainDark, secondaryDark, mainLight } from '../helpers/colors';\nimport { Redirect } from 'react-router-dom';\n\nimport store from '../redux/store';\nimport { logout } from '../redux/actions/auth'\n\nimport axios from 'axios';\naxios.defaults.baseURL = 'https://nk-asp.herokuapp.com';\n// axios.defaults.headers.common['Content-Type'] = 'application/x-www-form-urlencoded';\n\n\n\n\n\nconst style = {\n    responsive: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    brand: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: 100,\n        color: '#aaaaaa',\n        fontFamily: 'Quantico',\n        background: secondaryDark,\n        margin: 5,\n        borderRadius: 10\n    },\n    btn: {\n        background: secondaryDark,\n        margin: 10,\n        borderRadius: 10,\n        minHeight: 100,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n\n}\nconst Index = (props) => {\n\n    return (\n        ! props.isAuthenticated ?\n            <Redirect to='/login'></Redirect>\n            :\n            <Container fluid style={{ backgroundColor: mainDark }}>\n                <Row style={style.responsive}>\n                    <Col xs={9} md={9} xl={9} sm={9} lg={9} style={style.brand}>\n                        <h2 style={{ fontSize: '3vw', color: mainLight }}>NGUYEN KIM RATING DASHBOARD</h2>\n                    </Col>\n                    <Col xs={2} md={2} xl={2} sm={2} lg={2} style={style.btn}>\n                        <Button variant='outline-info' onClick={() => store.dispatch(logout())}>Logout</Button>\n                    </Col>\n                </Row>\n                <Row style={{ ...style.responsive }}>\n                    <Col xs={11} md={11} xl={5} sm={11} lg={5} style={{ border: `1px solid ${secondaryDark}`, background: secondaryDark, borderRadius: 10, margin: 10 }} >\n                        <PercentageChart />\n                    </Col>\n                    <Col xs={11} md={11} xl={5} sm={11} lg={5} style={{ border: `1px solid ${secondaryDark}`, background: secondaryDark, borderRadius: 10, margin: 10 }} >\n                        <LineChart />\n                    </Col>\n                    <Col xs={11} md={11} xl={10} sm={11} lg={10} style={{ border: `1px solid ${secondaryDark}`, background: secondaryDark, borderRadius: 10, margin: 10 }} >\n                        <ColumnChart></ColumnChart>\n                    </Col>\n                    <Col xs={11} md={11} xl={10} sm={11} lg={10} style={{ border: `1px solid ${secondaryDark}`, background: secondaryDark, borderRadius: 10, margin: 10 }} >\n                        <CommentSection></CommentSection>\n                    </Col>\n                </Row>\n            </Container>\n    );\n}\n\n\n\n\nconst mapStateToProps = (state) => (\n    {\n        isAuthenticated: state.auth.isAuthenticated\n    }\n)\nexport default connect(mapStateToProps)(Index);\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nexport const AlertError = (props) => (\n    props.display &&\n    <Alert variant=\"danger\" show={true} dismissible onClose={props.onClose} >\n        <Alert.Heading>{props.heading}</Alert.Heading>\n        <p>{props.text}</p>\n    </Alert>\n\n)\n\nexport const AlertSucceed = (props) => (\n    props.display &&\n    <Alert variant=\"success\" show={props.display} dismissible onClose={props.onClose} >\n        <Alert.Heading>{props.heading}</Alert.Heading>\n        <p>{props.text}</p>\n    </Alert>\n)","import React, { Component } from 'react';\nimport { Container, Row, Col, Form, Button, Alert } from 'react-bootstrap';\nimport { mainLight, secondaryDark, mainDark } from '../helpers/colors';\nimport {ERRORS_HEADING, returnError, clearMessages} from '../redux/actions/error'\nimport { AlertError } from '../components/Alerts'\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport store from '../redux/store';\nimport {login} from '../redux/actions/auth'\n\n\nconst style = {\n    responsive: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    brand: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: 80,\n        color: '#aaaaaa',\n        fontFamily: 'Quantico',\n        background: secondaryDark,\n        margin: '10px 20% 10px 20%',\n\n    },\n    text:{\n        color:'#dddddd'\n    }\n}\n\n\nclass Index extends Component {\n    constructor(){\n        super();\n        this.state = {\n            username: '',\n            password: '',\n        }\n    }\n\n\n    render(props) {\n        console.log(this.props.isAuthenticated)\n        return (\n            this.props.isAuthenticated ?\n            <Redirect to='/'></Redirect>\n            :\n            <Container>\n                <Row style={style.responsive}>\n                    <Col xs={10} sm={10} md={12} lg={8} xl={8} style={{...style.brand}}>\n                        <h5 style={{ fontSize: '3vw', color: mainLight, whiteSpace:'nowrap' }}>NGUYENKIM RATING DASHBOARD</h5>\n                    </Col>\n                </Row>\n                \n                <Row style={style.responsive}>\n                \n                    <Col xs={10} sm={10} md={12} lg={8} xl={8} style={{background:secondaryDark,  padding: '5%'}}>\n                        <AlertError display={ERRORS_HEADING.loginFailed in this.props.messages.error} onClose={() => { store.dispatch(clearMessages()) }}  \n                                    heading={ERRORS_HEADING.loginFailed} \n                                    text={ this.props.messages.error ? this.props.messages.error[ERRORS_HEADING.loginFailed] : {}} />\n                        <AlertError display={ERRORS_HEADING.severError in this.props.messages.error} onClose={() => { store.dispatch(clearMessages()) }}  \n                                    heading={ERRORS_HEADING.severError} \n                                    text={ this.props.messages.error ? this.props.messages.error[ERRORS_HEADING.severError] : {}} />\n                        <Form fullWidth>\n                        <h1 style={{color:'#dddddd'}}>Login</h1>\n                            <Form.Group controlId=\"formBasicEmail\" lg>\n                                <Form.Label style={style.text}>Username</Form.Label>\n                                <Form.Control \n                                    type=\"text\" \n                                    placeholder=\"admin\" \n                                    size=\"lg\" \n                                    style={{backgroundColor: secondaryDark, color:'#ffffff'}}\n                                    value={this.state.username}\n                                    onChange={(e) => this.setState({username: e.target.value})}\n                                    />\n                                <Form.Text className=\"text-muted\" >\n                                    Admin login only!\n                                </Form.Text>\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword\" lg>\n                                <Form.Label style={style.text}>Password</Form.Label>\n                                <Form.Control \n                                    type=\"password\" \n                                    placeholder=\"password\" \n                                    size=\"lg\" \n                                    style={{backgroundColor: secondaryDark, color:'#ffffff'}}\n                                    value={this.state.password}\n                                    onChange={(e) => this.setState({password: e.target.value})}\n                                    />\n                            </Form.Group>\n\n                            <Button variant=\"info\" type=\"button\" onClick={() => store.dispatch(login(this.state.username, this.state.password))} >\n                                Submit\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated,\n        messages: state.messages\n    }\n}\n\nexport default connect(mapStateToProps)(Index);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from './views/Home';\nimport Login from './views/Login';\n\n\nimport store from './redux/store';\nimport {loadAdmin} from './redux/actions/auth'\n\n\n\nclass App extends Component {\n\n    componentDidMount(){\n        store.dispatch(loadAdmin())\n    };\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/login\" component={Login} />\n                    <Route exact path=\"/\" component={Home} />\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport store from './redux/store'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App></App>\n    </Provider> , \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}