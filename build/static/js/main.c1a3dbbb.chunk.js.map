{"version":3,"sources":["helpers/colors.js","helpers/timeParser.js","components/APIToolbar.js","redux/actions/types.js","helpers/config.js","redux/reducers/dashboard.js","redux/reducers/auth.js","redux/actions/error.js","redux/reducers/error.js","redux/store.js","redux/actions/dashboards.js","helpers/APIservices.js","components/circleChart.js","components/generalChart.js","components/columnChart.js","components/CommentSection.js","redux/actions/auth.js","views/Home.js","components/Alerts.js","views/Login.js","App.js","serviceWorker.js","index.js"],"names":["secondaryDark","mainLight","extractFromTimestamp","timestamps","extractKey","map","time","t","Date","getHours","concat","getDate","getMonth","getFullYear","style","responsive","display","alignItems","rowOption","margin","selected","color","ICONS_MAP","DURATIONS","faCalendarAlt","TIMER","faStopwatch","LIMITS","faListOl","VIEWS","faEye","LOCATIONS","faMapMarkerAlt","capitalize","string","charAt","toUpperCase","slice","RowOption","_this","this","props","data","length","dropdown","react_default","a","createElement","Row","Object","objectSpread","Col","xs","md","xl","sm","lg","whiteSpace","index_es","icon","name","Form","Group","controlId","Control","as","onChange","e","onOptionChange","target","value","backgroundColor","val","key","verticalAlign","fontSize","justifyContent","ButtonGroup","aria-label","Button","size","variant","selections","onClick","Component","ToolbarQuery","option","_this2","_this3","Container","fluid","keys","options","APIToolbar_RowOption","includes","faSyncAlt","d","Number","h","Math","floor","m","s","secondsToHms","countdown","SET_MODES","SET_DURATIONS","SET_LIMITS","SET_TIMER","SET_VIEWS","SET_CATEGORIES","SET_LOCATIONS","SET_COUNTDOWN","SET_DATA","SET_SERIES","APPEND_SERIES","NODATA","UNAUTHORIZED","timestampKey","apiEndPoint","ratingColors","baseURL","ratingWords","initialState","modes","durations","limits","views","timer","series","labels","locations","entityReducer","prefixName","arguments","undefined","state","action","type","payload","categories","token","localStorage","getItem","isAuthenticated","isLoading","user","auth","username","setItem","removeItem","ERRORS_HEADING","success","error","reducer","combineReducers","generalDashboard","entityDashboard","circleDashboard","columnDashboard","messages","store","createStore","applyMiddleware","thunk","setAPIOption","prefix","defineProperty","setData","setSeries","appendSeries","setTimeCountdown","tick","extractDataByKey","serialData","label","axios","defaults","Index","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getLocations","firstOption","get","params","headers","Authorization","getState","then","res","updateCountdown","_tickCountdown","update","resetTimer","dispatch","chartName","_updateInterval","clearInterval","interval","setInterval","setState","newData","duration","location","all","updateDataByType","optionChange","dataError","chart","id","width","foreColor","fontFamily","toolbar","show","tools","download","selection","zoom","zoomin","zoomout","pan","reset","colors","fill","opacity","title","text","align","stroke","theme","palette","plotOptions","pie","customScale","offsetX","offsetY","expandOnClick","dataLabels","offset","minAngleToShowLabel","donut","background","tooltip","enabled","obj","rated","limit","push","sort","b","max","apply","toConsumableArray","catch","err","response","status","borderRadius","marginTop","flexDirection","minHeight","height","APIToolbar","optionsState","Alert","react_apexcharts_min_default","defaultProps","connect","resetSeries","ApexChart","exec","xaxis","yaxis","min","tickAmount","optionsMixedChart","curve","markers","strokeWidth","strokeOpacity","hover","grid","borderColor","mode","legend","radius","transition","kind","keyMap","avg","total","newSeries","overrideOptions","rating","lines","container","overflowY","maxHeight","sastisfactionIcon","faAngry","faFrown","faMeh","faSmile","faLaughBeam","Comment","date","toLocaleString","feedback","limitComment","comments","position","top","ListGroup","ind","CommentSection_Comment","created_at","comment","loadAdmin","_token","Content-Type","brand","btn","border","circleChart","generalChart","columnChart","CommentSection_Index","react_router","to","AlertError","dismissible","onClose","Heading","heading","password","padding","Alerts_AlertError","fullWidth","Label","placeholder","post","App","react_router_dom","path","component","Login","exact","Home","Boolean","window","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRACaA,EAAgB,UAEhBC,EAAY,4CCHZC,EAAuB,SAACC,EAAYC,GAE7C,OAAOA,GACH,IAAK,OACD,OAAOD,EAAWE,IAAK,SAAAC,GACnB,IAAIC,EAAI,IAAIC,KAAKF,GACjB,OAAUC,EAAEE,WAAkBF,EAAEE,WAAa,QAGrD,IAAK,MACD,OAAON,EAAWE,IAAK,SAAAC,GACnB,IAAIC,EAAI,IAAIC,KAAKF,GACjB,SAAAI,OAAUH,EAAEI,UAAZ,KAAAD,OAAyBH,EAAEK,cAInC,IAAK,QACD,OAAOT,EAAWE,IAAK,SAAAC,GACnB,IAAIC,EAAI,IAAIC,KAAKF,GACjB,SAAAI,QAAYH,EAAEK,WAAa,GAAK,KAAO,EAAI,IAAML,EAAEK,WAAa,GAAK,GAArE,KAAAF,OAA2EH,EAAEM,mBCZvFC,EAAQ,CACVC,WAAY,CACRC,QAAS,OACTC,WAAY,UAEhBC,UAAW,CACPC,OAAQ,qBAEZC,SAAU,CACNC,MAAO,YAITC,EAAY,CACdC,UAAaC,IACbC,MAASC,IACTC,OAAUC,IACVC,MAASC,IACTC,UAAaC,KAGjB,SAASC,EAAWC,GAChB,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,OAMnDC,mLACO,IAAAC,EAAAC,KACL,OACIA,KAAKC,MAAMC,KAAKC,OACZH,KAAKC,MAAMG,SAEHC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKlC,MAAKmC,OAAAC,EAAA,EAAAD,CAAA,GAAOnC,EAAMC,WAAeD,EAAMI,YAC5C2B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG1C,MAAO,CAAEO,MAAOpB,IACpD4C,EAAAC,EAAAC,cAAA,KAAGjC,MAAO,CAAEK,OAAQ,EAAGsC,WAAY,WAAnC,IAAgDZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAiBC,KAAMrC,EAAUkB,KAAKC,MAAMmB,KAAKxB,iBAAjG,IAAqHH,EAAYO,KAAKC,MAAMmB,MAA5I,OAEJf,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG1C,MAAO,CAAEO,MAAOpB,IACxD4C,EAAAC,EAAAC,cAACc,EAAA,EAAKC,MAAN,CAAYC,UAAU,8BACtBlB,EAAAC,EAAAC,cAACc,EAAA,EAAKG,QAAN,CAAcC,GAAG,SAASC,SAAU,SAACC,GAAQ5B,EAAKE,MAAM2B,eAAe7B,EAAKE,MAAMmB,KAAMO,EAAEE,OAAOC,QAC7FxD,MAAO,CAAEyD,gBAAiBvE,EAAeqB,MAAO,YAE5CmB,KAAKC,MAAMC,KAAKrC,IAAI,SAAAmE,GAAG,OAClB3B,EAAAC,EAAAC,cAAA,UACG0B,IAAKD,GACJA,SAQrB3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKlC,MAAKmC,OAAAC,EAAA,EAAAD,CAAA,GAAOnC,EAAMC,WAAeD,EAAMI,YACxC2B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG1C,MAAO,CAAEO,MAAOpB,IACpD4C,EAAAC,EAAAC,cAAA,KAAGjC,MAAO,CAAC2C,WAAW,SAAUiB,cAAc,WAC1C7B,EAAAC,EAAAC,cAAA,QAAMjC,MAAO,CAAEK,OAAQ,EAAGwD,SAAS,QAAnC,KAA8C9B,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAiBC,KAAMrC,EAAUkB,KAAKC,MAAMmB,KAAKxB,iBAA/F,IAAkHH,EAAYO,KAAKC,MAAMmB,MAAzI,OAGRf,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG1C,MAAKmC,OAAAC,EAAA,EAAAD,CAAA,GAAOnC,EAAMC,WAAb,CAAyB6D,eAAgB,YAClF/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAaC,aAAW,iBAEhBtC,KAAKC,MAAMC,MACXF,KAAKC,MAAMC,KAAKrC,IAAI,SAAAmE,GAAG,OAClB3B,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAQ,eACvBR,IAAKD,EACL1D,MAAOyB,EAAKE,MAAMyC,WAAW3C,EAAKE,MAAMmB,QAAUY,EAAM1D,EAAMM,SAAW,KACzE+D,QAAS,kBAAM5C,EAAKE,MAAM2B,eAAe7B,EAAKE,MAAMmB,KAAMY,KACzDA,QAM3B,UA/CMY,aAmGTC,6MA3CXjB,eAAiB,SAACkB,EAAQhB,GACtBiB,EAAK9C,MAAM2B,eAAekB,EAAQhB,4EAK7B,IAAAkB,EAAAhD,KAECI,EAAWJ,KAAKC,MAAMG,SAAWJ,KAAKC,MAAMG,SAAW,GAC7D,OACIC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAWC,OAAK,GACZ7C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIG,GAAI,GAAIF,GAAI,GAAIC,GAAI,GAAIE,GAAI,IAEjCP,OAAO0C,KAAKnD,KAAKC,MAAMmD,SAASvF,IAAI,SAACmE,GACjC,OAAO3B,EAAAC,EAAAC,cAAC8C,EAAD,CACHjC,KAAMY,EACN9B,KAAM8C,EAAK/C,MAAMmD,QAAQpB,GACzBC,IAAKD,EACLJ,eAAgBoB,EAAKpB,eACrBc,WAAYM,EAAK/C,MAAMyC,WACvBtC,SAAUA,EAASkD,SAAStB,QAM5C3B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIG,GAAI,GAAIF,GAAI,GAAIC,GAAI,EAAGE,GAAI,GACpCX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKlC,MAAKmC,OAAAC,EAAA,EAAAD,CAAA,GAAOnC,EAAMC,WAAeD,EAAMI,YACxC2B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG1C,MAAKmC,OAAAC,EAAA,EAAAD,CAAA,CAAI5B,MAAOpB,GAAca,EAAMC,aACxE8B,EAAAC,EAAAC,cAAA,KAAGjC,MAAO,CAAEK,OAAQ,IAApB,IAA0B0B,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAiBC,KAAMoC,MAAjD,OAEJlD,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG1C,MAAKmC,OAAAC,EAAA,EAAAD,CAAA,CAAI5B,MAAOpB,GAAca,EAAMC,WAA/B,CAA2C6D,eAAgB,YACpG/B,EAAAC,EAAAC,cAAA,KAAGjC,MAAO,CAAEK,OAAQ,ID9FxB,SAAC6E,GACzBA,EAAIC,OAAOD,GAEX,IAAIE,EAAIC,KAAKC,MAAMJ,EAAI,MACnBK,EAAIF,KAAKC,MAAMJ,EAAI,KAAO,IAC1BM,EAAIH,KAAKC,MAAMJ,EAAI,KAAO,IAE9B,OAAQ,IAAME,GAAG7D,OAAO,GAAK,KAAO,IAAMgE,GAAGhE,OAAO,GAAK,KAAO,IAAMiE,GAAGjE,OAAO,GCuF1BkE,CAAa/D,KAAKC,MAAM+D,wBApCvDpB,sBCvFdqB,EAAY,YACZC,EAAgB,gBAChBC,EAAa,aACbC,EAAY,YACZC,EAAY,YACZC,EAAiB,iBACjBC,EAAgB,gBAGhBC,EAAgB,gBAGhBC,EAAW,WAEXC,EAAa,aACbC,EAAgB,gBAuBhBC,EAAS,SACTC,EAAe,eCrCtBC,EAAc,MACdC,EAAc,gBACdC,EAAe,CAAC,UAAW,UAAW,UAAW,UAAW,WAC5DC,EAAU,+BACVC,EAAc,CAAC,6BAAiB,oBAAa,2BAAe,WAAO,wCCJnEC,GAAe,CACjBC,MAAO,GACPC,UAAW,GACXC,OAAQ,GACRC,MAAO,GACPC,MAAO,GACPC,OAAQ,GACRvF,KAAM,GACNwF,OAAQ,GACRC,UAAW,IAIA,SAASC,KAA4B,IAAdC,EAAcC,UAAA3F,OAAA,QAAA4F,IAAAD,UAAA,GAAAA,UAAA,GAAH,GAE7C,OAAO,WAA+C,IAA9BE,EAA8BF,UAAA3F,OAAA,QAAA4F,IAAAD,UAAA,GAAAA,UAAA,GAAtBX,GAAcc,EAAQH,UAAA3F,OAAA,EAAA2F,UAAA,QAAAC,EAElD,OAAQE,EAAOC,MAEX,KAAKL,EAAa5B,EACd,OAAOxD,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIZ,MAAOa,EAAOE,QAAQf,QAG9B,KAAKS,EAAa3B,EACd,OAAOzD,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIX,UAAWY,EAAOE,QAAQd,YAGlC,KAAKQ,EAAa1B,EACd,OAAO1D,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIV,OAAQW,EAAOE,QAAQb,SAI/B,KAAKO,EAAaxB,EACd,OAAO5D,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIT,MAAOU,EAAOE,QAAQZ,QAG9B,KAAKM,EAAazB,EACd,OAAO3D,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIR,MAAOS,EAAOE,QAAQX,QAG9B,KAAKK,EAAapB,EACd,OAAOhE,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEI9F,KAAM+F,EAAOE,QAAQjG,OAG7B,KAAK2F,EAAavB,EACd,OAAO7D,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEII,WAAYH,EAAOE,QAAQC,aAGnC,KAAKP,EAAanB,EACd,OAAOjE,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIP,OAAQQ,EAAOE,QAAQV,SAG/B,KAAKI,EAAalB,EACd,OAAOlE,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIP,OAAQO,EAAMP,OAAOvH,OAAO+H,EAAOE,QAAQjG,QAGnD,KAAK2F,EAAatB,EACd,OAAO9D,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIL,UAAYM,EAAOE,QAAQR,YAGnC,KAAKE,EAAarB,EACd,OAAA/D,OAAAC,EAAA,EAAAD,CAAA,GACOuF,EADP,CAEIhC,UAAYiC,EAAOE,QAAQnC,YAGnC,QACI,OAAOgC,ICxFvB,IAAMb,GAAe,CACjBkB,MAAOC,aAAaC,QAAQ,SAC5BC,kBAAmBF,aAAaC,QAAQ,SACxCE,WAAW,EACXC,KAAM,MAiDKC,GA9CF,WAAkC,IAAjCX,EAAiCF,UAAA3F,OAAA,QAAA4F,IAAAD,UAAA,GAAAA,UAAA,GAAzBX,GAAcc,EAAWH,UAAA3F,OAAA,EAAA2F,UAAA,QAAAC,EAE3C,OAAQE,EAAOC,MAEX,IHUoB,eGThB,OAAOzF,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIS,WAAW,IAGnB,IHEmB,YGDf,OAAOhG,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIS,WAAW,EACXC,KAAMT,EAAOE,QAAQS,WAG7B,IHAqB,gBGEjB,OADAN,aAAaO,QAAQ,QAASZ,EAAOE,QAAQE,OACtC5F,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIK,MAAOJ,EAAOE,QAAQE,MACtBI,WAAW,EACXC,KAAMT,EAAOE,QAAQS,WAG7B,IHRoB,eGSpB,IHdmB,cGgBf,OADAN,aAAaQ,WAAW,SACjBrG,OAAAC,EAAA,EAAAD,CAAA,GACAuF,EADP,CAEIK,MAAO,KACPK,KAAM,KACNF,iBAAiB,EACjBC,WAAW,IAEnB,IHrBoB,eGsBhB,OAAAhG,OAAAC,EAAA,EAAAD,CAAA,GACOuF,EADP,CAEIQ,iBAAiB,IAEzB,QACI,OAAOR,aChDNe,GACK,yBADLA,GAEI,gBCFb5B,GAAe,CACf6B,QAAS,GACTC,MAAO,IAiCIC,GA3BC,WAAkC,IAAjClB,EAAiCF,UAAA3F,OAAA,QAAA4F,IAAAD,UAAA,GAAAA,UAAA,GAAzBX,GAAcc,EAAWH,UAAA3F,OAAA,EAAA2F,UAAA,QAAAC,EAE9C,OAAOE,EAAOC,MAEV,ILkBiB,YKjBb,OAAAzF,OAAAC,EAAA,EAAAD,CAAA,GACOuF,EADP,CAEIiB,MAAOhB,EAAOE,UAGtB,ILamB,cKZf,OAAA1F,OAAAC,EAAA,EAAAD,CAAA,GACOuF,EADP,CAEIgB,QAASf,EAAOE,UAGxB,ILQsB,iBKPlB,MAAM,CACFc,MAAO,GACPD,QAAS,IAGjB,QACI,OAAOhB,sBC3BbkB,GAAUC,aAAgB,CAACC,iBAAkBC,GAAgB,gBAAiBC,gBAAiBD,GAAgB,eAAgBE,gBAAiBF,GAAgB,eAAgBV,KAAMA,GAAMa,SAASP,KAE5LQ,GADDC,aAAYR,GAAS,GAAIS,aAAgBC,OCJ1CC,GAAe,SAAC/E,EAAQhB,EAAOgG,GACxC,MAAO,CACH5B,KAAI,GAAAhI,OAAK4J,EAAL,QAAA5J,OAAkB4E,EAAOlD,eAC7BuG,QAAQ1F,OAAAsH,GAAA,EAAAtH,CAAA,GACHqC,EAAUhB,KAMVkG,GAAU,SAAC9H,EAAM4H,GAC1B,MAAO,CACH5B,KAAM4B,EAAOrD,EACb0B,QAAQ,CACJjG,KAAMA,KAKL+H,GAAY,SAACxC,EAAQqC,GAC9B,MAAO,CACH5B,KAAM4B,EAAOpD,EACbyB,QAAQ,CACJV,OAAQA,KAKPyC,GAAe,SAAChI,EAAM4H,GAC/B,MAAM,CACF5B,KAAM4B,EAAOnD,EACbwB,QAAQ,CACJjG,KAAOA,KAeNiI,GAAmB,SAACC,EAAMN,GACnC,MAAO,CACH5B,KAAK4B,EAAOtD,EACZ2B,QAAQ,CACJnC,UAAWoE,KCtCVC,GAAmB,SAACnI,EAAM+B,GAEnC,OADY/B,EAAKrC,IAAI,SAAAmE,GAAG,OAAKA,EAAIC,MAIxBqG,GAAa,SAACpI,EAAMqI,EAAO/J,GAEpC,MAAO,CACH0B,KAAMA,EACNkB,KAAMmH,EACNrC,KAAM1H,ICNdgK,KAAMC,SAASxD,QAAUA,MAInByD,eAsBF,SAAAA,EAAYzI,GAAO,IAAAF,EAAA,OAAAU,OAAAkI,EAAA,EAAAlI,CAAAT,KAAA0I,IACf3I,EAAAU,OAAAmI,EAAA,EAAAnI,CAAAT,KAAAS,OAAAoI,EAAA,EAAApI,CAAAiI,GAAAI,KAAA9I,KAAMC,KAiEV8I,aAAe,WACX,IAAIC,EAAc,MAClBR,KAAMS,IAAN,GAAA/K,OAAa6G,EAAb,cACI,CACImE,OAAQ,GACRC,QAAS,CACLC,cAAA,UAAAlL,OAA2BuJ,GAAM4B,WAAW1C,KAAKN,UAGxDiD,KAAK,SAAAC,GAAG,OAAIA,EAAIrJ,KAAKA,OACrBoJ,KAAK,SAAApJ,GACFH,EAAKE,MAAMmD,QAAQuC,UAAY,CAACqD,GAAa9K,OAAOmK,GAAiBnI,EAAM,gBA7EpEH,EAyInByJ,gBAAkB,WACc,IAAxBzJ,EAAK0J,gBACL1J,EAAK2J,SACL3J,EAAK4J,cAGL5J,EAAK0J,gBAAkB,EAC3BhC,GAAMmC,SAASzB,GAAiBpI,EAAK0J,eAAgB1J,EAAKE,MAAM4J,aAhJjD9J,EAmJnB4J,WAAa,WACL5J,EAAKiG,MAAM8D,iBACXC,cAAchK,EAAKiG,MAAM8D,iBAC7B/J,EAAK0J,eAAiBhC,GAAM4B,WAAW/B,gBAAgB9B,MACvD,IAAIwE,EAAWC,YAAYlK,EAAKyJ,gBAAiB,KACjDzJ,EAAKmK,SAAS,CAACJ,gBAAkBE,KAxJlBjK,EA2JnB2J,OAAS,WACL,IAAIS,EAAU,GACVC,EAAW3C,GAAM4B,WAAW/B,gBAAgBjC,UAAYoC,GAAM4B,WAAW/B,gBAAgBjC,UAAYtF,EAAKE,MAAMmD,QAAX,UAAgC,GACrIiH,EAAW5C,GAAM4B,WAAW/B,gBAAgB3B,UAAY8B,GAAM4B,WAAW/B,gBAAgB3B,UAAY5F,EAAKE,MAAMmD,QAAX,UAAgC,GACxH,QAAbiH,IAAsBA,EAAW,IACrC7B,KAAM8B,IACF,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGzM,IAAI,SAAAmE,GAAG,OACnBjC,EAAKwK,iBAAiBvI,EAAKoI,EAAUD,EAASE,OAlKvCtK,EAsKnByK,aAAe,SAAC1H,EAAQhB,GACpB2F,GAAMmC,SAAS/B,GAAa/E,EAAQhB,EAAO/B,EAAKE,MAAM4J,YACtD9J,EAAK2J,SACL3J,EAAK4J,cAvKL5J,EAAKiG,MAAQ,CACT8D,gBAAiB,KACjBW,UAAW,GACXvK,KAAM,GACNkD,QAAS,CACLsC,OAAQR,EACRwF,MAAO,CACHC,GAAI5K,EAAKE,MAAM4J,UACfe,MAAO,MACPC,UAAWpN,EACXqN,WAAY,+BACZ3I,SAAU,IACV4I,QAAS,CACLC,MAAM,EACNC,MAAO,CACHC,UAAU,EACVC,WAAW,EACXC,MAAM,EACNC,QAAQ,EACRC,SAAS,EACTC,KAAK,EACLC,OAAO,KAInBC,OAAQzG,EACR0G,KAAM,CACFC,QAAS,IAEbC,MAAO,CACHC,KAAM,6BACNC,MAAO,QAEXC,OAAQ,CACJN,OAAQ,CAAC,gBAEbO,MAAO,CACHC,QAAS,YAEbC,YAAa,CACTC,IAAK,CACDC,YAAa,EACbC,QAAS,EACTC,QAAS,EACTC,eAAe,EACfC,WAAY,CACRC,OAAQ,EACRC,oBAAqB,IAEzBC,MAAO,CACHnK,KAAM,MACNoK,WAAY,iBAIxBC,QAAS,CACLC,SAAS,KA1DN/M,mFAiFC,IAAAgD,EAAA/C,KAChBA,KAAKyJ,eAAiBzJ,KAAKC,MAAMmD,QAAQoC,MAAM,GAC/CxF,KAAK+I,eACLtI,OAAO0C,KAAKnD,KAAKC,MAAMmD,SAASvF,IAAI,SAAAkP,GAAG,OAAItF,GAAMmC,SAAS/B,GAAakF,EAAKhK,EAAK9C,MAAMmD,QAAQ2J,GAAK,GAAIhK,EAAK9C,MAAM4J,cACnH7J,KAAK0J,SACL1J,KAAK2J,sDAIQzD,EAAMkE,EAAUD,EAASE,GAAU,IAAArH,EAAAhD,KAGhDwI,KAAMS,IAAN,GAAA/K,OAAa6G,EAAb,KAAA7G,OADkB,QAClB,KACI,CACIgL,OAAQ,CACJ8D,MAAO9G,EACPkE,SAAUA,EACV6C,MAPE,EAQF5C,SAAUA,GAEdlB,QAAS,CACLC,cAAA,UAAAlL,OAA2B8B,KAAKC,MAAM0G,KAAKN,UAIlDiD,KAAK,SAAAC,GAAG,OAAIA,EAAIrJ,KAAKA,OACrBoJ,KAAK,SAAAC,GACF,IAAMrJ,EAAOmI,GAAiBkB,EAhBpB,SAgBoC,GAC9CY,EAAQ+C,KAAK,CAAEhN,KAAMA,EAAMkB,KAAM8E,IACV,IAAnBiE,EAAQhK,SACRgK,EAAQgD,KAAK,SAAC7M,EAAG8M,GAAJ,OAAW9M,EAAEc,KAAOgM,EAAEhM,KAAQ,EAAMd,EAAEc,KAAOgM,EAAEhM,MAAS,EAAI,IAEzEqG,GAAMmC,SAAS5B,GAAQK,GAAiB8B,EAAS,QAASnH,EAAK/C,MAAM4J,YAGnB,IAA9ClG,KAAK0J,IAALC,MAAA3J,KAAIlD,OAAA8M,EAAA,EAAA9M,CAAQ0J,EAAQtM,IAAI,SAAAkP,GAAG,OAAIA,EAAI7M,SACnC8C,EAAKkH,SAAS,CACVO,UAAW7F,IAGf5B,EAAKkH,SAAS,CACVO,UAAW,QAK1B+C,MAAM,SAAAC,GACAA,EAAIC,UAAoC,MAAxBD,EAAIC,SAASC,QAC5B3K,EAAKkH,SAAS,CACVO,UAAW5F,qDA2CvB7E,KAAKgG,MAAM8D,iBACXC,cAAc/J,KAAKgG,MAAM8D,gDAG1B7J,GACH,OACII,EAAAC,EAAAC,cAAA,OAAKjC,MAAO,CAAEsP,aAAc,EAAGC,UAAW,GAAIrP,QAAS,OAAQsP,cAAe,SAAUlB,WAAYpP,EAAeuQ,UAAW,OAAQC,OAAOhO,KAAKgG,MAAMyE,YAAc7F,EAAS,OAAQ,SACnLvE,EAAAC,EAAAC,cAAC0N,EAAD,CACI7K,QAASpD,KAAKC,MAAMmD,QACpBV,WAAY1C,KAAKC,MAAMiO,aACvBtM,eAAgB5B,KAAKwK,aACrBpK,SAAU,CAAC,aACX4D,UAAWhE,KAAKyJ,iBAGhBzJ,KAAKgG,MAAMyE,YAAc5F,EACzBxE,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAO1L,QAAQ,UAAf,+EAIIzC,KAAKgG,MAAMyE,YAAc7F,EACzBvE,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAO1L,QAAQ,aAAf,IAA4BpC,EAAAC,EAAAC,cAAA,6BAC5BF,EAAAC,EAAAC,cAAC6N,EAAA9N,EAAD,CAAO8C,QAASpD,KAAKgG,MAAM5C,QAASqC,OAAQzF,KAAKC,MAAMiO,aAAahO,KAAMgG,KAAK,kBAzNnFtD,aAAd8F,GAYK2F,aAAe,CAClBjL,QAAS,CACLiC,UAAW,CAAC,MAAO,SACnBG,MAAO,CAAC,GAAI,GAAI,MAChBG,UAAW,IAEfF,OAAQ,GACRoE,UAAW,eA8MnB,IAOeyE,eAPS,SAACtI,GAAD,MACpB,CACIkI,aAAclI,EAAMsB,gBACpBX,KAAMX,EAAMW,OAIL2H,CAAyB5F,aC5OxCF,KAAMC,SAASxD,QAAUA,MAEnByD,eAuBF,SAAAA,EAAYzI,GAAO,IAAAF,EAAA,OAAAU,OAAAkI,EAAA,EAAAlI,CAAAT,KAAA0I,IACf3I,EAAAU,OAAAmI,EAAA,EAAAnI,CAAAT,KAAAS,OAAAoI,EAAA,EAAApI,CAAAiI,GAAAI,KAAA9I,KAAMC,KAwEVsO,YAAc,WACVC,KAAUC,KAAK1O,EAAKE,MAAM4J,UAAW,gBA1EtB9J,EA6EnBwK,iBAAmB,WAAkD,IAAhDyC,EAAgDlH,UAAA3F,OAAA,QAAA4F,IAAAD,UAAA,GAAAA,UAAA,GAAxC,KAAMsE,EAAkCtE,UAAA3F,OAAA,QAAA4F,IAAAD,UAAA,GAAAA,UAAA,GAAvB,KAAMmH,EAAiBnH,UAAA3F,OAAA,QAAA4F,IAAAD,UAAA,GAAAA,UAAA,GAAT,KAExD0C,KAAMS,IAAN,GAAA/K,OAAa6G,EAAb,KAAA7G,OADqB,MACrB,KACI,CACIgL,OAAQ,CACJ8D,MAAOA,EACP5C,SAAUA,EACV6C,MAAOA,GAEX9D,QAAS,CACLC,cAAA,UAAAlL,OAA2B6B,EAAKE,MAAM0G,KAAKN,UAGlDiD,KAAK,SAAAC,GAAG,OAAIA,EAAIrJ,KAAKA,OACrBoJ,KAAK,SAAAC,GACF,IAAMrJ,EAAOmI,GAAiBkB,EAAK,WAC7B5L,EAAa0K,GAAiBkB,EAAKzE,GACnCsB,EAAa1I,EAAqBC,EAAYyM,GAC9C3E,EAAS6C,GAAWpI,EAAM,aAAcuH,GAAM4B,WAAWjC,iBAAiB7B,OAChFkC,GAAMmC,SAAS1B,GAAazC,EAAQ1F,EAAKE,MAAM4J,YAE/C,IACI2E,KAAUC,KAAK1O,EAAKE,MAAM4J,UAAW,gBAAiB,CAClD6E,MAAO,CACHtI,WAAYA,KAGpBoI,KAAUC,KAAK1O,EAAKE,MAAM4J,UAAW,gBAAiB,CAClD8E,MAAO,CACHC,IAAK,EACLC,WAAY,EACZxB,IAAK,KAIjB,MAAOI,IACPhG,GAAMmC,SAAS5B,GAAQ,CAACvC,GAAS1F,EAAKE,MAAM4J,YAGnB,IAAtBlG,KAAK0J,IAALC,MAAA3J,KAAIlD,OAAA8M,EAAA,EAAA9M,CAAQP,IACXH,EAAKmK,SAAS,CACVO,UAAW7F,IAGf7E,EAAKmK,SAAS,CACVO,UAAW,OAGtB+C,MAAM,SAAAC,GACAA,EAAIC,UAAoC,MAAxBD,EAAIC,SAASC,QAC5B5N,EAAKmK,SAAS,CACVO,UAAW5F,OAhIZ9E,EAwInByJ,gBAAkB,WACc,IAAxBzJ,EAAK0J,gBACL1J,EAAK2J,SACL3J,EAAK4J,cAGL5J,EAAK0J,gBAAkB,EAC3BhC,GAAMmC,SAASzB,GAAiBpI,EAAK0J,eAAgB1J,EAAKE,MAAM4J,aA/IjD9J,EAkJnB4J,WAAa,WACL5J,EAAK+J,iBACLC,cAAchK,EAAK+J,iBACvB/J,EAAK0J,eAAiBhC,GAAM4B,WAAWjC,iBAAiB5B,MACxDzF,EAAK+J,gBAAkBG,YAAYlK,EAAKyJ,gBAAiB,MAtJ1CzJ,EA0JnB2J,OAAS,WACL3J,EAAKwK,iBACD,EACA9C,GAAM4B,WAAWjC,iBAAiB/B,UAClCoC,GAAM4B,WAAWjC,iBAAiB9B,SA9JvBvF,EAmKnByK,aAAe,SAAC1H,EAAQhB,GACpB2F,GAAMmC,SAAS/B,GAAa/E,EAAQhB,EAAO/B,EAAKE,MAAM4J,YACtD9J,EAAK2J,SACL3J,EAAK4J,cApKL5J,EAAKiG,MAAQ,CACTyE,UAAW,GACXzG,UAAW,GACXyB,OAAQ,GACRqJ,kBAAmB,CACfpE,MAAO,CACHE,MAAO,OACPgC,WAAYpP,EACZmN,GAAI5K,EAAKE,MAAM4J,WAEnB+B,MAAO,CACHC,KAAM,oCACNC,MAAO,UAEXL,OAAQ,CAAChO,GAETsO,OAAQ,CACJnB,MAAO,EACPe,QAAS,EACToD,MAAO,UAEXC,QAAS,CACLxM,KAAM,EACNyM,YAAa,EACbC,cAAe,EACfC,MAAO,CACH3M,KAAM,IAGdmM,MAAO,CACHE,WAAY,EACZD,IAAK,EACLvB,IAAK,GAET+B,KAAM,CACFC,YAAa,WAEjBrD,MAAO,CACHsD,KAAM,QAGVC,OAAQ,CACJlD,QAAS,EACTC,SAAU,GACV0B,OAAQ,GACRgB,QAAS,CACLpE,MAAO,GACPoD,OAAQ,GACRwB,OAAQ,KAGhB9D,KAAM,CACFC,QAAS,MAtDN5L,iFA8DDE,GAAO,IAAA8C,EAAA/C,KACrBA,KAAKyJ,eAAiBzJ,KAAKC,MAAMmD,QAAQoC,MAAM,GAC/CxF,KAAK8J,gBAAkB,KAEvBrJ,OAAO0C,KAAKnD,KAAKC,MAAMmD,SAASvF,IAAI,SAACkP,GAAD,OAAStF,GAAMmC,SAAS/B,GAAakF,EAAKhK,EAAK9C,MAAMmD,QAAQ2J,GAAK,GAAIhK,EAAK9C,MAAM4J,cACrH7J,KAAKuK,iBAAkB,EAAGvK,KAAKC,MAAMmD,QAAX,UAAgC,GAAIpD,KAAKC,MAAMmD,QAAX,OAA6B,IAG3FpD,KAAK2J,4DAmGF3J,KAAK8J,iBACJC,cAAc/J,KAAK8J,gDAGpB7J,GACH,OACII,EAAAC,EAAAC,cAAA,OAAKjC,MAAO,CAAEsP,aAAc,EAAGC,UAAW,GAAIrP,QAAS,OAAQsP,cAAe,SAAUlB,WAAYpP,EAAeuQ,UAAW,OAAQ0B,WAAW,OAASzB,OAAOhO,KAAKgG,MAAMyE,YAAc7F,EAAS,OAAO,SACtMvE,EAAAC,EAAAC,cAAC0N,EAAD,CAAcrM,eAAgB5B,KAAKwK,aAAcpH,QAASpD,KAAKC,MAAMmD,QAASV,WAAY1C,KAAKC,MAAMiO,aAAclK,UAAWhE,KAAKC,MAAMiO,aAAalK,YAElJhE,KAAKgG,MAAMyE,YAAc5F,EACzBxE,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAO1L,QAAQ,UAAf,+EAEIzC,KAAKgG,MAAMyE,YAAc7F,EACzBvE,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAO1L,QAAQ,aACXpC,EAAAC,EAAAC,cAAA,6BAIJF,EAAAC,EAAAC,cAAC6N,EAAA9N,EAAD,CAAO8C,QAASpD,KAAKgG,MAAM8I,kBAC3BrJ,OAAQzF,KAAKC,MAAMiO,aAAahO,KAChCgG,KAAK,iBApNTtD,aAAd8F,GAYK2F,aAAe,CAClBjL,QAAS,CACLiC,UAAW,CAAC,OAAQ,MAAO,SAC3BC,OAAQ,CAAC,EAAG,GAAI,IAChBE,MAAO,CAAC,GAAI,GAAI,MAChBD,MAAO,CAAC,OAAQ,SAEpBsE,UAAW,gBAyMnB,IAMeyE,eANS,SAACtI,GAAD,MACpB,CACIkI,aAAclI,EAAMoB,iBACpBT,KAAMX,EAAMW,OAGL2H,CAAyB5F,ICrOxCF,KAAMC,SAASxD,QAAUA,MAGnByD,eA8BF,SAAAA,EAAYzI,GAAO,IAAAF,EAAA,OAAAU,OAAAkI,EAAA,EAAAlI,CAAAT,KAAA0I,IACf3I,EAAAU,OAAAmI,EAAA,EAAAnI,CAAAT,KAAAS,OAAAoI,EAAA,EAAApI,CAAAiI,GAAAI,KAAA9I,KAAMC,KA4EV8I,aAAe,WACX,IAAIC,EAAc,MAClBR,KAAMS,IAAN,GAAA/K,OAAa6G,EAAb,cACI,CACImE,OAAQ,GACRC,QAAS,CACLC,cAAA,UAAAlL,OAA2B6B,EAAKE,MAAM0G,KAAKN,UAGlDiD,KAAK,SAAAC,GAAG,OAAIA,EAAIrJ,KAAKA,OACrBoJ,KAAK,SAAApJ,GACFH,EAAKE,MAAMmD,QAAQuC,UAAY,CAACqD,GAAa9K,OAAOmK,GAAiBnI,EAAM,eAG9EsN,MAAM,SAAAC,GACyB,MAAxBA,EAAIC,SAASC,QACb5N,EAAKmK,SAAS,CACVO,UAAW5F,OA9FZ9E,EAqGnBwK,iBAAmB,SAACmF,EAAMxJ,EAAMkE,EAAU6C,EAAO5C,GAC7C,IAAMsF,EAAS,CACXC,IAAO,UACPC,MAAS,SAGbrH,KAAMS,IAAN,GAAA/K,OAAa6G,EAAb,KAAA7G,OAA4BwR,EAA5B,KACI,CACIxG,OAAQ,CACJ8D,MAAO9G,EACPkE,SAAUA,EACV6C,MAAOA,EACP5C,SAAUA,GAEdlB,QAAS,CACLC,cAAA,UAAAlL,OAA2B6B,EAAKE,MAAM0G,KAAKN,UAGlDiD,KAAK,SAAAC,GAAG,OAAIA,EAAIrJ,KAAKA,OACrBoJ,KAAK,SAAAC,GACF,IAAMrJ,EAAOmI,GAAiBkB,EAAKoG,EAAOD,IACpC/R,EAAa0K,GAAiBkB,EAAKzE,GACnCsB,EAAa1I,EAAqBC,EAAYyM,GAC9C3E,EAAS6C,GAAWpI,EAAD,GAAAhC,OAAUgI,EAAV,OAAAhI,OAAoBgH,EAAYgB,EAAO,IAAMuB,GAAM4B,WAAW9B,gBAAgBhC,OACnGxF,EAAKE,MAAMiO,aAAazI,OAAOtF,QAAU,GACzCsH,GAAMmC,SAAS1B,GAAazC,EAAQ1F,EAAKE,MAAM4J,YAGnD,IACI2E,KAAUC,KAAK1O,EAAKE,MAAM4J,UAAW,gBAAiB,CAClD6E,MAAO,CACHtI,WAAYA,KAGP,QAATsJ,EACAlB,KAAUC,KAAK1O,EAAKE,MAAM4J,UAAW,gBAAiB,CAClD8E,MAAO,CACHC,IAAK,EACLC,WAAY,EACZxB,IAAK,KAKiC,IAA1CtN,EAAKE,MAAMiO,aAAazI,OAAOtF,QAC/BqO,KAAUC,KAAK1O,EAAKE,MAAM4J,UAAW,gBAAiB,CAClD8E,MAAO,CACHC,IAAK,EACLC,WAAY,EACZxB,IAAK1J,KAAK0J,IAALC,MAAA3J,KAAIlD,OAAA8M,EAAA,EAAA9M,CAAQV,EAAKE,MAAMiO,aAAazI,OAAO5H,IAAI,SAACkP,GAAD,OAASpJ,KAAK0J,IAALC,MAAA3J,KAAIlD,OAAA8M,EAAA,EAAA9M,CAAQsM,EAAI7M,cAMjG,MAAOuN,GACH1N,EAAKmK,SAAS,CACV4E,kBAAkBrO,OAAAC,EAAA,EAAAD,CAAA,GACXV,EAAKiG,MAAM8I,kBADD,CAEbH,MAAO,CACHE,WAAY,EACZD,IAAK,EACLvB,IAAK1J,KAAK0J,IAALC,MAAA3J,KAAIlD,OAAA8M,EAAA,EAAA9M,CAAQV,EAAKE,MAAMiO,aAAazI,OAAO5H,IAAI,SAACkP,GAAD,OAASpJ,KAAK0J,IAALC,MAAA3J,KAAIlD,OAAA8M,EAAA,EAAA9M,CAAQsM,EAAI7M,gBAK7F,GAA8C,IAA1CH,EAAKE,MAAMiO,aAAazI,OAAOtF,OAAc,CAC7C,IAAI2P,EAAY/P,EAAKE,MAAMiO,aAAazI,OAAO0H,KAAK,SAAC7M,EAAG8M,GAAJ,OAAW9M,EAAEc,KAAOgM,EAAEhM,KAAQ,EAAMd,EAAEc,KAAOgM,EAAEhM,MAAS,EAAI,IAChHrB,EAAKmK,SAAS,CACVzE,OAAQqK,IAGqD,IAA7DnM,KAAK0J,IAALC,MAAA3J,KAAIlD,OAAA8M,EAAA,EAAA9M,CAAQqP,EAAUjS,IAAI,SAAAkP,GAAG,OAAIpJ,KAAK0J,IAALC,MAAA3J,KAAIlD,OAAA8M,EAAA,EAAA9M,CAAQsM,EAAI7M,WACjDH,EAAKmK,SAAS,CACVO,UAAW7F,IAIf7E,EAAKmK,SAAS,CACVO,UAAW,QAM1B+C,MAAM,SAAAC,GACCA,EAAIC,UAAoC,MAAxBD,EAAIC,SAASC,QAC7B5N,EAAKmK,SAAS,CACVO,UAAW5F,OA9LZ9E,EAsMnByJ,gBAAkB,WACc,IAAxBzJ,EAAK0J,gBACL1J,EAAK2J,SACL3J,EAAK4J,cAGL5J,EAAK0J,gBAAkB,EAC3BhC,GAAMmC,SAASzB,GAAiBpI,EAAK0J,eAAgB1J,EAAKE,MAAM4J,aA7MjD9J,EAgNnB4J,WAAa,WACL5J,EAAK+J,iBACLC,cAAchK,EAAK+J,iBACvB/J,EAAK0J,eAAiBhC,GAAM4B,WAAW9B,gBAAgB/B,MACvDzF,EAAK+J,gBAAkBG,YAAYlK,EAAKyJ,gBAAiB,MApN1CzJ,EAuNnB2J,OAAS,WACL,IAAMqG,EACK,QAEXvH,KAAM8B,IACF,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGzM,IAAI,SAAAmS,GAAM,OAAIjQ,EAAKwK,iBAC/BwF,EACAC,EACAvI,GAAM4B,WAAW9B,gBAAgBlC,UACjCoC,GAAM4B,WAAW9B,gBAAgBjC,OACc,QAA/CmC,GAAM4B,WAAW9B,gBAAgB5B,UAAsB,GAAK8B,GAAM4B,WAAW9B,gBAAgB5B,cAGhG2D,KAAK,SAAAC,GAAG,OAAI9B,GAAMmC,SAAS3B,GAAU,GAAIlI,EAAKE,MAAM4J,eApO1C9J,EAwOnByK,aAAe,SAAC1H,EAAQhB,GACpB2F,GAAMmC,SAAS/B,GAAa/E,EAAQhB,EAAO/B,EAAKE,MAAM4J,YACtD9J,EAAK2J,SACL3J,EAAK4J,cAzOL5J,EAAKiG,MAAQ,CACTyE,UAAW,GACX9E,UAAW,GACXF,OAAQ,GACRqJ,kBAAmB,CACfpE,MAAO,CACHE,MAAO,OACPgC,WAAYpP,EACZmN,GAAI1K,EAAM4J,WAEd+B,MAAO,CACHC,KAAM,kCACNC,MAAO,UAEXL,OAAQzG,EACR+G,OAAQ,CACJnB,MAAO,EACPe,QAAS,EACToD,MAAO,UAEXC,QAAS,CACLxM,KAAM,EACNyM,YAAa,EACbC,cAAe,EACfC,MAAO,CACH3M,KAAM,IAGdmM,MAAO,CACHE,WAAY,EACZD,IAAK,EACLvB,IAAK,GAET+B,KAAM,CACFC,YAAa,UACbX,MAAO,CACHuB,MAAO,CACHjF,MAAM,KAIlBgB,MAAO,CACHsD,KAAM,QAEVC,OAAQ,CACJlD,QAAS,EACTC,SAAU,GACV0B,OAAQ,GACRgB,QAAS,CACLpE,MAAO,GACPoD,OAAQ,GACRwB,OAAQ,IAGhB9D,KAAM,CACFC,QAAS,IAEba,WAAY,CACRM,SAAS,KA5DN/M,iFAoEDE,GAAO,IAAA8C,EAAA/C,KACrBA,KAAKyJ,eAAiBzJ,KAAKC,MAAMmD,QAAQoC,MAAM,GAC/CxF,KAAK8J,gBAAkB,KACvB9J,KAAK+I,eACLtI,OAAO0C,KAAKnD,KAAKC,MAAMmD,SAASvF,IAAI,SAACkP,GAAD,OAAStF,GAAMmC,SAAS/B,GAAakF,EAAKhK,EAAK9C,MAAMmD,QAAQ2J,GAAK,GAAIhK,EAAK9C,MAAM4J,cACrH7J,KAAK0J,SACL1J,KAAK2J,4DAqKD3J,KAAK8J,iBACLC,cAAc/J,KAAK8J,gDAGpB7J,GACH,OACII,EAAAC,EAAAC,cAAA,OAAKjC,MAAO,CAAEsP,aAAc,EAAGC,UAAW,GAAIrP,QAAS,OAAQsP,cAAe,SAAUlB,WAAYpP,EAAeuQ,UAAW,SAC1H1N,EAAAC,EAAAC,cAAC0N,EAAD,CACIrM,eAAgB5B,KAAKwK,aACrBpH,QAASpD,KAAKC,MAAMmD,QACpBV,WAAY1C,KAAKC,MAAMiO,aACvB9N,SAAU,CAAC,aACX4D,UAAWhE,KAAKC,MAAMiO,aAAalK,YAGnChE,KAAKgG,MAAMyE,YAAc5F,EACrBxE,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAO1L,QAAQ,UAAf,+EAIIzC,KAAKgG,MAAMyE,YAAc7F,EACzBvE,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAO1L,QAAQ,aACXpC,EAAAC,EAAAC,cAAA,6BAIJF,EAAAC,EAAAC,cAAC6N,EAAA9N,EAAD,CAAO8C,QAASpD,KAAKgG,MAAM8I,kBAAmBrJ,OAAQzF,KAAKgG,MAAMP,OAAQS,KAAK,gBAvStFtD,aAAd8F,GAmBK2F,aAAe,CAClBjL,QAAS,CACLiC,UAAW,CAAC,OAAQ,MAAO,SAC3BC,OAAQ,CAAC,EAAG,GAAI,IAChBE,MAAO,CAAC,GAAI,GAAI,MAChBD,MAAO,CAAC,SAAU,OAAQ,SAE9BE,OAAQ,GACRoE,UAAW,eAoRnB,IAMeyE,eANS,SAACtI,GAAD,MACpB,CACIkI,aAAclI,EAAMuB,gBACpBZ,KAAMX,EAAMW,OAGL2H,CAAyB5F,cClUxCF,KAAMC,SAASxD,QAAUA,EAGzB,IAAM3G,GAAQ,CACV4R,UAAW,CACPC,UAAW,SACXC,UAAW,QACXrO,gBAAiBvE,EACjBqB,MAAO,YAOTwR,GAAoB,CAACC,IAASC,IAASC,IAAOC,IAASC,KAEvDC,GAAU,SAAC1Q,GACb,IAAIuD,EAAI,IAAIxF,KAAKiC,EAAM2Q,MAEvB,OAAOvQ,EAAAC,EAAAC,cAAA,aAAMiD,EAAEqN,iBAAR,IAA0BxQ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAiB5C,MAAO,CAACO,MAAOmG,EAAa/E,EAAM+M,MAAM,IAAI7L,KAAMkP,GAAkBpQ,EAAM+M,MAAQ,KACnI3M,EAAAC,EAAAC,cAAA,QAAMjC,MAAO,CAACO,MAAOmG,EAAa/E,EAAM+M,MAAM,KAA9C,KAAsD9H,EAAYjF,EAAM+M,MAAM,GAA9E,MAAqF/M,EAAM6Q,SAA3F,OAIgBpI,eAQjB,SAAAA,EAAYzI,GAAO,IAAAF,EAAA,OAAAU,OAAAkI,EAAA,EAAAlI,CAAAT,KAAA0I,IACf3I,EAAAU,OAAAmI,EAAA,EAAAnI,CAAAT,KAAAS,OAAAoI,EAAA,EAAApI,CAAAiI,GAAAI,KAAA9I,KAAMC,KAYVyJ,OAAS,WAELlB,KAAMS,IACF,yBACA,CACIC,OAAQ,CACJ+D,MAAOlN,EAAKE,MAAM8Q,cAEtB5H,QAAS,CACLC,cAAA,UAAAlL,OAA2BoI,aAAaC,QAAQ,aAIvD+C,KAAK,SAAAC,GAAG,OAAIA,EAAIrJ,KAAKA,OACrBoJ,KAAK,SAAApJ,GACFH,EAAKmK,SAAS,CAAE8G,SAAU9Q,IAEN,IAAhBA,EAAKC,OACLJ,EAAKmK,SAAS,CACVO,UAAW7F,IAGf7E,EAAKmK,SAAS,CACVO,UAAW,OAGtB+C,MAAM,SAAAC,GACAA,EAAIC,UAAoC,MAAxBD,EAAIC,SAASC,QAC5B5N,EAAKmK,SAAS,CACVO,UAAW5F,OAxC3B9E,EAAKiG,MAAQ,CACTyE,UAAW,GACXuG,SAAU,IAJCjR,mFAQfC,KAAK0J,SACL1J,KAAK8J,gBAAkBG,YAAYjK,KAAK0J,OAAQ,oDAwC5C1J,KAAK8J,iBACLC,cAAc/J,KAAK8J,kDAIvB,OACIzJ,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACI5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,OAAKjC,MAAO,CAAE2S,SAAU,SAAUC,IAAK,EAAGtE,WAAYpP,EAAeoN,MAAO,MAAOoD,OAAQ,MAAOnP,MAAOpB,IACrG4C,EAAAC,EAAAC,cAAA,iCAGRF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKlC,MAAKmC,OAAAC,EAAA,EAAAD,CAAA,GAAOnC,GAAM4R,UAAb,CAAwBE,UAAW,UAEjCpQ,KAAKgG,MAAMyE,YAAc5F,GACzBxE,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAO1L,QAAQ,UAAf,+EAKAzC,KAAKgG,MAAMyE,YAAc7F,EACzBvE,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAO1L,QAAQ,YAAYnE,MAAO,CAACsM,MAAM,SACrCvK,EAAAC,EAAAC,cAAA,6BAIJF,EAAAC,EAAAC,cAAC4Q,GAAA,EAAD,CAAW1O,QAAQ,SACdzC,KAAKgG,MAAMgL,SAASnT,IAAI,SAACkP,EAAKqE,GAAN,OAAc/Q,EAAAC,EAAAC,cAAC8Q,GAAD,CAAST,KAAM7D,EAAIuE,WAAYtE,MAAOD,EAAIC,MAAO8D,SAAU/D,EAAIwE,QAAStP,IAAKmP,gBApFjHxO,aAAd8F,GAIV2F,aAAe,CAClB0C,aAAe,ICpCvBvI,KAAMC,SAASxD,QAAUA,EAGlB,IAAMuM,GAAY,SAACC,GAAD,OAAY,SAAC7H,EAAUP,GAE5CO,EAAS,CAAE1D,Kbca,iBabxB,IAAMG,EAAQoL,GAAkBpI,IAAW1C,KAAKN,MAEhDmC,KAAMS,IAAI,kBAAmB,CACzBC,OAAQ,GACRC,QAAS,CACLuI,eAAgB,kBAChBtI,cAAA,UAAAlL,OAA2BmI,MAG9BiD,KAAK,SAAAC,GACFK,EAAS,CACL1D,KbGY,eaFZC,QAASoD,EAAIrJ,SAGpBsN,MACG,SAAAC,GACSA,EAAIC,SAOwB,MAAxBD,EAAIC,SAASC,SAClB/D,EAAS,CACL1D,KbHC,YaIDC,QAAQ1F,OAAAsH,GAAA,EAAAtH,CAAA,GACHsG,GAA6B,+BAGtC6C,EAAS,CACL1D,KbpBG,iBaMP0D,EAAS,CACL1D,KbIC,YaHDC,QAAQ1F,OAAAsH,GAAA,EAAAtH,CAAA,GACHsG,GAA4B,kCCbzDyB,KAAMC,SAASxD,QAAUA,EAOzB,IAAM3G,GAAQ,CACVC,WAAY,CACRC,QAAS,OACT4D,eAAgB,SAChB3D,WAAY,UAEhBkT,MAAO,CACHnT,QAAS,OACT4D,eAAgB,SAChB3D,WAAY,SACZsP,UAAW,IACXlP,MAAO,UACPiM,WAAY,WACZ8B,WAAYpP,EACZmB,OAAQ,EACRiP,aAAc,IAElBgE,IAAK,CACDhF,WAAYpP,EACZmB,OAAQ,GACRiP,aAAc,GACdG,UAAW,IACXvP,QAAS,OACT4D,eAAgB,SAChB3D,WAAY,WA6CL6P,eALS,SAACtI,GAAD,MACpB,CACIQ,gBAAiBR,EAAMW,KAAKH,kBAGrB8H,CAzCD,SAACrO,GAEX,OACKA,EAAMuG,gBAGHnG,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAWC,OAAK,EAAC5E,MAAO,CAAEyD,gBjB3Dd,YiB4DR1B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKlC,MAAOA,GAAMC,YACd8B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG1C,MAAOA,GAAMqT,OACjDtR,EAAAC,EAAAC,cAAA,MAAIjC,MAAO,CAAE6D,SAAU,MAAOtD,MAAOpB,IAArC,gCAEJ4C,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG1C,MAAOA,GAAMsT,KACjDvR,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAQE,QAAQ,eAAeE,QAAS,kBAAM8E,GAAMmC,SDyBhD,SAACA,EAAUP,GAEnCO,EAAS,CACL1D,KbvEmB,oBc2CH,YAGR7F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKlC,MAAKmC,OAAAC,EAAA,EAAAD,CAAA,GAAOnC,GAAMC,aACnB8B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAAIC,GAAI,EAAG1C,MAAO,CAAEuT,OAAM,aAAA3T,OAAeV,GAAiBoP,WAAYpP,EAAeoQ,aAAc,GAAIjP,OAAQ,KAC3I0B,EAAAC,EAAAC,cAACuR,GAAD,OAEJzR,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAAIC,GAAI,EAAG1C,MAAO,CAAEuT,OAAM,aAAA3T,OAAeV,GAAiBoP,WAAYpP,EAAeoQ,aAAc,GAAIjP,OAAQ,KAC3I0B,EAAAC,EAAAC,cAACwR,GAAD,OAEJ1R,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAI1C,MAAO,CAAEuT,OAAM,aAAA3T,OAAeV,GAAiBoP,WAAYpP,EAAeoQ,aAAc,GAAIjP,OAAQ,KAC7I0B,EAAAC,EAAAC,cAACyR,GAAD,OAEJ3R,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAI1C,MAAO,CAAEuT,OAAM,aAAA3T,OAAeV,GAAiBoP,WAAYpP,EAAeoQ,aAAc,GAAIjP,OAAQ,KAC7I0B,EAAAC,EAAAC,cAAC0R,GAAD,SAtBZ5R,EAAAC,EAAAC,cAAC2R,EAAA,EAAD,CAAUC,GAAG,aCtDZC,GAAa,SAACnS,GAAD,OACtBA,EAAMzB,SACN6B,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAO1L,QAAQ,SAASuI,MAAM,EAAMqH,aAAW,EAACC,QAASrS,EAAMqS,SAC3DjS,EAAAC,EAAAC,cAAC4N,EAAA,EAAMoE,QAAP,KAAgBtS,EAAMuS,SACtBnS,EAAAC,EAAAC,cAAA,SAAIN,EAAM4L,QCIZvN,GAAQ,CACVC,WAAY,CACRC,QAAS,OACT4D,eAAgB,SAChB3D,WAAY,UAEhBkT,MAAO,CACHnT,QAAS,OACT4D,eAAgB,SAChB3D,WAAY,SACZsP,UAAW,GACXlP,MAAO,UACPiM,WAAY,WACZ8B,WAAYpP,EACZmB,OAAQ,qBAGZkN,KAAK,CACDhN,MAAM,YAKR6J,eACF,SAAAA,IAAa,IAAA3I,EAAA,OAAAU,OAAAkI,EAAA,EAAAlI,CAAAT,KAAA0I,IACT3I,EAAAU,OAAAmI,EAAA,EAAAnI,CAAAT,KAAAS,OAAAoI,EAAA,EAAApI,CAAAiI,GAAAI,KAAA9I,QACKgG,MAAQ,CACTY,SAAU,GACV6L,SAAU,IAJL1S,sEASNE,GAAO,IAAA8C,EAAA/C,KACV,OACIA,KAAKC,MAAMuG,gBACXnG,EAAAC,EAAAC,cAAC2R,EAAA,EAAD,CAAUC,GAAG,MAEb9R,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACI5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKlC,MAAOA,GAAMC,YACd8B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIG,GAAI,GAAIF,GAAI,GAAIG,GAAI,EAAGF,GAAI,EAAGxC,MAAKmC,OAAAC,EAAA,EAAAD,CAAA,GAAMnC,GAAMqT,QACxDtR,EAAAC,EAAAC,cAAA,MAAIjC,MAAO,CAAE6D,SAAU,MAAOtD,MAAOpB,EAAWwD,WAAW,WAA3D,gCAIRZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKlC,MAAOA,GAAMC,YAEd8B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIG,GAAI,GAAIF,GAAI,GAAIG,GAAI,EAAGF,GAAI,EAAGxC,MAAO,CAACsO,WAAWpP,EAAgBkV,QAAS,OACnFrS,EAAAC,EAAAC,cAACoS,GAAD,CAAYnU,QAASuI,MAA8B/G,KAAKC,MAAMuH,SAASP,MAAOqL,QAAS,WAAQ7K,GAAMmC,SZ/BlH,CACH1D,KJMsB,iBILtBC,QAAQ,MY8BoBqM,QAASzL,GACT8E,KAAO7L,KAAKC,MAAMuH,SAASP,MAAQjH,KAAKC,MAAMuH,SAASP,MAAMF,IAA8B,KACvG1G,EAAAC,EAAAC,cAACoS,GAAD,CAAYnU,QAASuI,MAA6B/G,KAAKC,MAAMuH,SAASP,MAAOqL,QAAS,WAAQ7K,GAAMmC,SZlCjH,CACH1D,KJMsB,iBILtBC,QAAQ,MYiCoBqM,QAASzL,GACT8E,KAAO7L,KAAKC,MAAMuH,SAASP,MAAQjH,KAAKC,MAAMuH,SAASP,MAAMF,IAA6B,KACtG1G,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMuR,WAAS,GACfvS,EAAAC,EAAAC,cAAA,MAAIjC,MAAO,CAACO,MAAM,YAAlB,SACIwB,EAAAC,EAAAC,cAACc,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAiBP,IAAE,GACrCX,EAAAC,EAAAC,cAACc,EAAA,EAAKwR,MAAN,CAAYvU,MAAOA,GAAMuN,MAAzB,YACAxL,EAAAC,EAAAC,cAACc,EAAA,EAAKG,QAAN,CACI0E,KAAK,OACL4M,YAAY,QACZtQ,KAAK,KACLlE,MAAO,CAACyD,gBAAiBvE,EAAeqB,MAAM,WAC9CiD,MAAO9B,KAAKgG,MAAMY,SAClBlF,SAAU,SAACC,GAAD,OAAOoB,EAAKmH,SAAS,CAACtD,SAAUjF,EAAEE,OAAOC,YAI3DzB,EAAAC,EAAAC,cAACc,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBAAoBP,IAAE,GACxCX,EAAAC,EAAAC,cAACc,EAAA,EAAKwR,MAAN,CAAYvU,MAAOA,GAAMuN,MAAzB,YACAxL,EAAAC,EAAAC,cAACc,EAAA,EAAKG,QAAN,CACI0E,KAAK,WACL4M,YAAY,WACZtQ,KAAK,KACLlE,MAAO,CAACyD,gBAAiBvE,EAAeqB,MAAM,WAC9CiD,MAAO9B,KAAKgG,MAAMyM,SAClB/Q,SAAU,SAACC,GAAD,OAAOoB,EAAKmH,SAAS,CAACuI,SAAU9Q,EAAEE,OAAOC,YAI3DzB,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAQE,QAAQ,OAAOyD,KAAK,SAASvD,QAAS,kBAAM8E,GAAMmC,UHxChEhD,EGwC+E7D,EAAKiD,MAAMY,SHxChF6L,EGwC0F1P,EAAKiD,MAAMyM,SHxCxF,SAAA7I,GAEzCpB,KAAMuK,KACF,iBACA,CACInM,SAAUA,EACV6L,SAAUA,IAEbnJ,KAAK,SAAAC,GACFK,EAAS,CACL1D,KbnCa,gBaoCbC,QAASoD,EAAIrJ,SAGpBsN,MAAM,SAAAC,GACEA,EAAIC,SAOwB,MAAxBD,EAAIC,SAASC,QAClB/D,EAAS,CACL1D,Kb1CK,Ya2CLC,QAAQ1F,OAAAsH,GAAA,EAAAtH,CAAA,GACHsG,GAA6B,+BAVtC6C,EAAS,CACL1D,KbnCK,YaoCLC,QAAQ1F,OAAAsH,GAAA,EAAAtH,CAAA,GACHsG,GAA4B,gCAY5CuC,KACG,SAAAC,GAAG,OACCK,EAAS4H,WAjCJ,IAAC5K,EAAU6L,IGwCJ,qBAzDR7P,aA4EL0L,eAPS,SAACtI,GACrB,MAAO,CACHQ,gBAAiBR,EAAMW,KAAKH,gBAC5BgB,SAAUxB,EAAMwB,WAIT8G,CAAyB5F,ICjFzBsK,+LAfPvL,GAAMmC,SAAS4H,uCAIf,OACInR,EAAAC,EAAAC,cAAC0S,EAAA,EAAD,KACI5S,EAAAC,EAAAC,cAAC2R,EAAA,EAAD,KACI7R,EAAAC,EAAAC,cAAC2R,EAAA,EAAD,CAAOgB,KAAK,SAASC,UAAWC,KAChC/S,EAAAC,EAAAC,cAAC2R,EAAA,EAAD,CAAOmB,OAAK,EAACH,KAAK,IAAIC,UAAWG,cAXnC1Q,aCCE2Q,QACW,cAA7BC,OAAOnJ,SAASoJ,UAEe,UAA7BD,OAAOnJ,SAASoJ,UAEhBD,OAAOnJ,SAASoJ,SAASC,MACvB,2DCRNC,IAASC,OACLvT,EAAAC,EAAAC,cAACsT,EAAA,EAAD,CAAUpM,MAAOA,IACbpH,EAAAC,EAAAC,cAACuT,GAAD,OAERC,SAASC,eAAe,SDmHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7K,KAAK,SAAA8K,GACjCA,EAAaC","file":"static/js/main.c1a3dbbb.chunk.js","sourcesContent":["export const mainDark = '#202534';\nexport const secondaryDark = '#303444';\nexport const colorScheme = '#971243';\nexport const mainLight = '#80deea';\nexport const colorGrid = '#78909c';\nexport const darkFade = '#3C495C'\n\nexport const gradient1 = 'rgba(160, 144, 223, 0.14)';\nexport const gradient2= 'rgba(223, 144, 215, 0.14)';\n\n\nexport const ratingColors = ['#af4448', '#ff8a65', '#ffd54f', '#aed581', '#00bfa5'];","export const extractFromTimestamp = (timestamps, extractKey) => {\n\n    switch(extractKey){\n        case 'hour':\n            return timestamps.map( time => { \n                var t = new Date(time); \n                return  + t.getHours() > 12 ? t.getHours() + ':00': t.getHours() + ':00'  });\n\n        \n        case 'day':\n            return timestamps.map( time => { \n                var t = new Date(time);\n                return `${t.getDate()}/${t.getMonth()}`;}\n            )\n\n        \n        case 'month':\n            return timestamps.map( time => { \n                var t = new Date(time);\n                return `${( t.getMonth() + 1) % 12 === 0 ? 12 : (t.getMonth() + 1) % 12}/${t.getFullYear()}`\n            }\n        );\n\n\n        default:\n            break\n            \n    }\n}\n\nexport const secondsToHms = (d) => {\n    d = Number(d);\n\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n    var s = Math.floor(d % 3600 % 60);\n\n    return ('0' + h).slice(-2) + \":\" + ('0' + m).slice(-2) + \":\" + ('0' + s).slice(-2);\n}","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Row, Col, Form } from 'react-bootstrap';\nimport { mainLight, secondaryDark } from '../helpers/colors';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt, faStopwatch, faListOl, faEye, faSyncAlt, faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport { secondsToHms } from '../helpers/timeParser';\n\nconst style = {\n    responsive: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    rowOption: {\n        margin: '10px 0px 10px 0px'\n    },\n    selected: {\n        color: '#ffffff'\n    }\n}\n\nconst ICONS_MAP = {\n    'DURATIONS': faCalendarAlt,\n    'TIMER': faStopwatch,\n    'LIMITS': faListOl,\n    'VIEWS': faEye,\n    'LOCATIONS': faMapMarkerAlt\n}\n\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\n\n\nclass RowOption extends Component {\n    render() {\n        return (\n            this.props.data.length ?\n                this.props.dropdown ?\n                    \n                        <Row style={{ ...style.responsive, ...style.rowOption,  }}>\n                        <Col xs={3} md={3} xl={3} sm={3} lg={3} style={{ color: mainLight }}>\n                            <p style={{ margin: 0, whiteSpace: 'nowrap' }}> <FontAwesomeIcon icon={ICONS_MAP[this.props.name.toUpperCase()]} /> {capitalize( this.props.name)}  </p>\n                        </Col>\n                        <Col xs={8} md={8} xl={8} sm={8} lg={8} style={{ color: mainLight,}}>\n                        <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Control as=\"select\" onChange={(e) => { this.props.onOptionChange(this.props.name, e.target.value) }}\n                            style={{ backgroundColor: secondaryDark, color: '#ffffff' }}>\n                            {\n                                this.props.data.map(val =>\n                                    (<option\n                                        key={val}>\n                                        {val}\n                                    </option>))\n                            }\n                        </Form.Control>\n                        </Form.Group>\n                        </Col>\n                        </Row>\n                    :\n                    <Row style={{ ...style.responsive, ...style.rowOption }}>\n                        <Col xs={3} md={3} xl={3} sm={3} lg={3} style={{ color: mainLight }}>\n                            <p style={{whiteSpace:'nowrap', verticalAlign:'middle'}}>\n                                <span style={{ margin: 0, fontSize:'2vh' }}>  <FontAwesomeIcon icon={ICONS_MAP[this.props.name.toUpperCase()]}/> {capitalize( this.props.name)} </span>\n                            </p>\n                        </Col>\n                        <Col xs={8} md={8} xl={8} sm={8} lg={8} style={{ ...style.responsive, justifyContent: 'center' }}>\n                            <ButtonGroup aria-label=\"Basic example\">\n                                {\n                                    this.props.data &&\n                                    this.props.data.map(val =>\n                                        (<Button size='sm' variant='outline-info'\n                                            key={val}\n                                            style={this.props.selections[this.props.name] === val ? style.selected : null}\n                                            onClick={() => this.props.onOptionChange(this.props.name, val)} >\n                                            {val}\n                                        </Button>))\n                                }\n                            </ButtonGroup>\n                        </Col>\n                    </Row >\n                : ''\n        )\n    }\n}\n\n\nclass ToolbarQuery extends Component {\n\n\n    onOptionChange = (option, value) => {\n        this.props.onOptionChange(option, value)\n    }\n\n\n\n    render() {\n\n        const dropdown = this.props.dropdown ? this.props.dropdown : []\n        return (\n            <Container fluid>\n                <Row>\n                    <Col xs={12} sm={12} md={12} xl={10} lg={10}>\n                        {\n                            Object.keys(this.props.options).map((val) => {\n                                return <RowOption\n                                    name={val}\n                                    data={this.props.options[val]}\n                                    key={val}\n                                    onOptionChange={this.onOptionChange}\n                                    selections={this.props.selections}\n                                    dropdown={dropdown.includes(val)}\n                                />\n                            })\n                        }\n                    </Col>\n\n                    <Col xs={12} sm={12} md={12} xl={2} lg={2}>\n                        <Row style={{ ...style.responsive, ...style.rowOption }}>\n                            <Col xs={3} md={3} xl={3} sm={3} lg={3} style={{ color: mainLight, ...style.responsive, }}>\n                                <p style={{ margin: 0 }}> <FontAwesomeIcon icon={faSyncAlt} />  </p>\n                            </Col>\n                            <Col xs={9} md={9} xl={9} sm={9} lg={9} style={{ color: mainLight, ...style.responsive, justifyContent: 'center' }}>\n                                <p style={{ margin: 0 }}>{secondsToHms(this.props.countdown)}</p>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default ToolbarQuery;\n\n","/****** Toolbar ********/\nexport const SET_MODES = 'SET_MODES';\nexport const SET_DURATIONS = 'SET_DURATIONS';\nexport const SET_LIMITS = 'SET_LIMITS';\nexport const SET_TIMER = 'SET_TIMER';\nexport const SET_VIEWS = 'SET_VIEWS';\nexport const SET_CATEGORIES = 'SET_CATEGORIES';\nexport const SET_LOCATIONS = 'SET_LOCATIONS';\n\n// flow control\nexport const SET_COUNTDOWN = 'SET_COUNTDOWN';\n\n// Series data\nexport const SET_DATA = 'SET_DATA';\nexport const SET_LABELS = 'SET_LABELS';\nexport const SET_SERIES = 'SET_SERIES';\nexport const APPEND_SERIES = 'APPEND_SERIES';\n\n\n/****** AUTHENTCATION ******/\n\nexport const USER_LOADED = 'USER_LOAD';\nexport const USER_LOGOUT = 'USER_LOGOUT';\nexport const USER_LOADING = 'USER_LOADING';\nexport const ADMIN_LOADED = 'ADMIN_LOADED';\n\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\n\n\nexport const AUTH_ERROR = 'AUTH_ERROR';\n\n/****** ERRORs *******/\nexport const GET_ERROR = 'GET_ERROR';\nexport const GET_SUCCESS = 'GET_SUCCESS';\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES';\n\n\n\nexport const NODATA = 'NODATA';\nexport const UNAUTHORIZED = 'UNAUTHORIZED';\n\n\n\n","// import {ratingColors} from './colors';\n// import {timestampKey, apiEndPoint} from './APIservices'\n// or\nconst timestampKey ='day'\nconst apiEndPoint = 'api/dashboard'\nconst ratingColors = ['#af4448', '#ff8a65', '#ffd54f', '#aed581', '#00bfa5']\nconst baseURL = 'https://nk-asp.herokuapp.com';\nconst ratingWords = ['Rất không tốt', 'Không tốt', 'Bình thường', 'Tốt', 'Rất tốt']\n\n\n\n\n\n\n\n// exporting configs\nexport {\n    baseURL,\n    ratingWords,\n    ratingColors,\n    timestampKey,\n    apiEndPoint\n}","import { SET_DATA, SET_MODES, SET_DURATIONS, SET_LIMITS, SET_TIMER, SET_VIEWS, SET_CATEGORIES, SET_SERIES, APPEND_SERIES, SET_LOCATIONS, SET_COUNTDOWN } from '../actions/types';\n\n\nconst initialState = {\n    modes: '',\n    durations: '',\n    limits: '',\n    views: '',\n    timer: '',\n    series: [],\n    data: [],\n    labels: [],\n    locations: []\n}\n\n\nexport default function entityReducer(prefixName=''){\n    \n    return function reducer(state = initialState, action) {\n\n        switch (action.type) {\n            \n            case prefixName + SET_MODES:\n                return {\n                    ...state,\n                    modes: action.payload.modes\n                }\n\n            case prefixName + SET_DURATIONS:\n                return {\n                    ...state,\n                    durations: action.payload.durations\n                }\n\n            case prefixName + SET_LIMITS:\n                return {\n                    ...state,\n                    limits: action.payload.limits\n                }\n\n\n            case prefixName + SET_VIEWS:\n                return {\n                    ...state,\n                    views: action.payload.views\n                }\n\n            case prefixName + SET_TIMER:\n                return {\n                    ...state,\n                    timer: action.payload.timer\n                }\n\n            case prefixName + SET_DATA:\n                return {\n                    ...state,\n                    data: action.payload.data\n                }\n\n            case prefixName + SET_CATEGORIES:\n                return {\n                    ...state,\n                    categories: action.payload.categories\n                }\n\n            case prefixName + SET_SERIES:\n                return {\n                    ...state,\n                    series: action.payload.series\n                }\n            \n            case prefixName + APPEND_SERIES:\n                return {\n                    ...state,\n                    series: state.series.concat(action.payload.data)\n                }\n            \n            case prefixName + SET_LOCATIONS:\n                return {\n                    ...state,\n                    locations : action.payload.locations\n                }\n            \n            case prefixName + SET_COUNTDOWN:\n                return{\n                    ...state,\n                    countdown : action.payload.countdown\n                }\n\n            default:\n                return state\n        }\n    }\n}\n\n","import { USER_LOADING, USER_LOADED, USER_LOGOUT, LOGIN_FAILED, LOGIN_SUCCESS, ADMIN_LOADED } from '../actions/types';\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: !!localStorage.getItem('token'),\n    isLoading: false,\n    user: null\n}\n\nconst auth = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            }\n\n        case USER_LOADED:       \n            return {\n                ...state,\n                isLoading: false,\n                user: action.payload.username\n            }; \n\n        case LOGIN_SUCCESS:\n            localStorage.setItem('token', action.payload.token)\n            return {\n                ...state,\n                token: action.payload.token,\n                isLoading: false,\n                user: action.payload.username\n            }\n\n        case LOGIN_FAILED:\n        case USER_LOGOUT:\n            localStorage.removeItem('token')\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false\n            }\n        case ADMIN_LOADED:\n            return{\n                ...state,\n                isAuthenticated: true\n            }\n        default:\n            return state\n    }\n}\n\nexport default auth;\n","import {GET_ERROR,  GET_SUCCESS, CLEAR_MESSAGES} from './types';\nexport const ERRORS = ['loginFailed', 'severError'];\n\nexport const ERRORS_HEADING = {\n    loginFailed : 'Authentication Error !',\n    severError : 'Server error!',\n}\n\nexport const returnError = (error, messages) => {\n\n    return {\n        type: GET_ERROR,\n        payload:{\n            [error]: messages\n        }\n    }\n}\n\nexport const returnSuccess = (success, messages) => {\n    return {\n        type: GET_SUCCESS,\n        payload:{\n            [success]: messages\n        }\n    }\n}\n\nexport const clearMessages = () => {\n    return {\n        type: CLEAR_MESSAGES,\n        payload:{}\n    }\n}","import {GET_ERROR, GET_SUCCESS, CLEAR_MESSAGES} from '../actions/types';\nimport {ERRORS} from '../actions/error'\n\nvar initialState = {\n    success: {},\n    error: {}\n}\n\n\n\n\nconst reducer = (state = initialState, action) => {\n\n    switch(action.type){\n\n        case GET_ERROR:\n            return{\n                ...state,\n                error: action.payload\n            }\n        \n        case GET_SUCCESS:\n            return{\n                ...state,\n                success: action.payload\n            }\n\n        case CLEAR_MESSAGES:\n            return{\n                error: {},\n                success: {}\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default reducer;","import entityDashboard from './reducers/dashboard';\nimport auth from './reducers/auth';\nimport error from './reducers/error'\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\n\nconst reducer = combineReducers({generalDashboard: entityDashboard('generalChart'), circleDashboard: entityDashboard('circleChart'), columnDashboard: entityDashboard('columnChart'), auth: auth, messages:error});\nconst store = createStore(reducer, {}, applyMiddleware(thunk));\nexport default store;","import { SET_DATA, SET_LABELS, SET_SERIES, APPEND_SERIES, SET_COUNTDOWN } from './types';\n\n\n\nexport const setAPIOption = (option, value, prefix) => {\n    return {\n        type: `${prefix}SET_${option.toUpperCase()}`,\n        payload:{\n            [option] : value\n        }\n    }\n}\n\n\nexport const setData = (data, prefix) => {\n    return {\n        type: prefix+SET_DATA,\n        payload:{\n            data: data\n        }\n    }\n}\n\nexport const setSeries = (series, prefix) => {\n    return {\n        type: prefix+SET_SERIES,\n        payload:{\n            series: series\n        }\n    }\n}\n\nexport const appendSeries = (data, prefix) => {\n    return{\n        type: prefix+APPEND_SERIES,\n        payload:{\n            data : data\n        }\n    }\n}\n\n\nexport const setLabels = (labels, prefix) => {\n    return {\n        type: prefix+SET_LABELS,\n        payload:{\n            labels : labels,\n        }\n    }\n}\n\nexport const setTimeCountdown = (tick, prefix) => {\n    return {\n        type:prefix+SET_COUNTDOWN,\n        payload:{\n            countdown: tick\n        }\n    }\n}","\nexport const APIoptions = {\n\n    modes: ['average', 'sum'],\n    durations: ['hour', 'month', 'day'],\n    limits: [7, 12, 24],\n    timers: [30, 60, 3600],\n    views: ['area', 'line'],\n    locations: [],\n    categories: [],\n\n};\n\nexport const APIversion = 'v1'\nexport const timestampKey = 'day';\nexport const apiEndPoint = `/api/dashboard`;\n\nexport const extractDataByKey = (data, key) => {\n    const res = data.map(val =>  val[key]);\n    return res\n}\n\nexport const serialData = (data, label, display) => {\n    // return list object representation to work with APEX\n    return {\n        data: data,\n        name: label,\n        type: display\n    }\n}\n\nexport const extractFromTimestamp = (timestamps, extractKey) => {\n\n    switch(extractKey){\n        case 'hour':\n            return timestamps.map( time => { \n                var t = new Date(time); \n                return t.getHours()});\n\n        \n        case 'day':\n            return timestamps.map( time => { \n                var t = new Date(time);\n                return t.getDay()});\n\n        \n        case 'month':\n            return timestamps.map( time => { \n                var t = new Date(time);\n                return t.getMonth()});\n\n\n        default:\n            break      \n    }\n}\n","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\nimport { mainLight, secondaryDark,} from '../helpers/colors';\nimport ToolbarQuery from './APIToolbar';\nimport propTypes from 'prop-types';\n\nimport { Alert } from 'react-bootstrap';\nimport { NODATA, UNAUTHORIZED } from '../redux/actions/types';\nimport { baseURL, ratingColors, ratingWords, apiEndPoint} from '../helpers/config'\n//calling API\nimport axios from 'axios';\n\n\n//redux state handling\nimport store from '../redux/store';\nimport { setAPIOption, setData } from '../redux/actions/dashboards';\nimport { connect } from 'react-redux';\nimport { setTimeCountdown } from '../redux/actions/dashboards'\nimport { extractDataByKey} from '../helpers/APIservices';\n\n\naxios.defaults.baseURL = baseURL;\n\n\n\nclass Index extends Component {\n\n    static propTypes = {\n        options : propTypes.shape({\n            duration: propTypes.arrayOf(propTypes.string),\n            timer: propTypes.arrayOf(propTypes.number),\n            location: propTypes.arrayOf(propTypes.string)\n        }),\n        series: propTypes.arrayOf(propTypes.number),\n        chartName: propTypes.string\n    }\n\n    static defaultProps = {\n        options: {\n            durations: ['day', 'month'],\n            timer: [10, 60, 3600],\n            locations: []\n        },\n        series: [],\n        chartName: 'circleChart'\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            _updateInterval: null,\n            dataError: '',\n            data: [],\n            options: {\n                labels: ratingWords,\n                chart: {\n                    id: this.props.chartName,\n                    width: '60%',\n                    foreColor: mainLight,\n                    fontFamily: 'Helvetica, Arial, sans-serif',\n                    fontSize: 800,\n                    toolbar: {\n                        show: true,\n                        tools: {\n                            download: true,\n                            selection: true,\n                            zoom: true,\n                            zoomin: true,\n                            zoomout: true,\n                            pan: true,\n                            reset: true\n                        }\n                    },\n                },\n                colors: ratingColors,\n                fill: {\n                    opacity: 0.9,\n                },\n                title: {\n                    text: 'Customer Rating Percentage',\n                    align: 'left'\n                },\n                stroke: {\n                    colors: ['transparent']\n                },\n                theme: {\n                    palette: 'palette1',\n                },\n                plotOptions: {\n                    pie: {\n                        customScale: 1,\n                        offsetX: 0,\n                        offsetY: 0,\n                        expandOnClick: true,\n                        dataLabels: {\n                            offset: 0,\n                            minAngleToShowLabel: 10\n                        },\n                        donut: {\n                            size: '55%',\n                            background: 'transparent',\n                        },\n                    }\n                },\n                tooltip: {\n                    enabled: true\n                }\n            }\n        }\n    }\n\n\n\n    getLocations = () => {\n        var firstOption = 'all';\n        axios.get(`${apiEndPoint}/location?`,\n            {\n                params: {},\n                headers: {\n                    \"Authorization\": `Bearer ${store.getState().auth.token}`\n                }\n            })\n            .then(res => res.data.data)\n            .then(data => {\n                this.props.options.locations = [firstOption].concat(extractDataByKey(data, 'location'));\n            })\n    }\n\n    componentDidMount() {\n        this._tickCountdown = this.props.options.timer[0]\n        this.getLocations()\n        Object.keys(this.props.options).map(obj => store.dispatch(setAPIOption(obj, this.props.options[obj][0], this.props.chartName)))\n        this.update()\n        this.resetTimer()\n    }\n\n\n    updateDataByType(type, duration, newData, location) {\n        const limit = 1;\n        const selection = 'total'\n        axios.get(`${apiEndPoint}/${selection}?`,\n            {\n                params: {\n                    rated: type,\n                    duration: duration,\n                    limit: limit,\n                    location: location\n                },\n                headers: {\n                    \"Authorization\": `Bearer ${this.props.auth.token}`\n                }\n            }\n        )\n            .then(res => res.data.data)\n            .then(res => {\n                const data = extractDataByKey(res, selection)[0];\n                newData.push({ data: data, name: type })\n                if (newData.length === 5) {\n                    newData.sort((a, b) => (a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0));\n                    // ApexCharts.exec(this.props.chartName, 'updateSeries', extractDataByKey(newData, 'data'), this.props.chartName);\n                    store.dispatch(setData(extractDataByKey(newData, 'data'), this.props.chartName))\n\n                    //Check data is empty?\n                    if (Math.max(...newData.map(obj => obj.data)) === 0)\n                        this.setState({\n                            dataError: NODATA\n                        })\n                    else\n                        this.setState({\n                            dataError: ''\n                        })\n                }\n\n            })\n            .catch(err => {\n                if(err.response && err.response.status === 403){\n                    this.setState({\n                        dataError: UNAUTHORIZED\n                    })\n                }\n            })\n\n    }\n\n    updateCountdown = () => {\n        if (this._tickCountdown === 0) {\n            this.update();\n            this.resetTimer()\n        }\n        else\n            this._tickCountdown -= 1\n        store.dispatch(setTimeCountdown(this._tickCountdown, this.props.chartName))\n    }\n\n    resetTimer = () => {\n        if (this.state._updateInterval)\n            clearInterval(this.state._updateInterval);\n        this._tickCountdown = store.getState().circleDashboard.timer;\n        var interval = setInterval(this.updateCountdown, 1000)\n        this.setState({_updateInterval : interval})\n    }\n\n    update = () => {\n        var newData = []\n        let duration = store.getState().circleDashboard.durations ? store.getState().circleDashboard.durations : this.props.options['durations'][0]\n        let location = store.getState().circleDashboard.locations ? store.getState().circleDashboard.locations : this.props.options['locations'][0]\n        if (location === 'all') { location = '' }\n        axios.all(\n            [1, 2, 3, 4, 5].map(val =>\n                this.updateDataByType(val, duration, newData, location))\n        )\n    }\n\n    optionChange = (option, value) => {\n        store.dispatch(setAPIOption(option, value, this.props.chartName));\n        this.update();\n        this.resetTimer();\n    }\n\n    componentWillUnmount() {\n        if (this.state._updateInterval)\n            clearInterval(this.state._updateInterval)\n    }\n\n    render(props) {\n        return (\n            <div style={{ borderRadius: 0, marginTop: 10, display: 'flex', flexDirection: 'column', background: secondaryDark, minHeight: '10vh', height:this.state.dataError === NODATA ? 'auto': '90vh' }}>\n                <ToolbarQuery\n                    options={this.props.options}\n                    selections={this.props.optionsState}\n                    onOptionChange={this.optionChange}\n                    dropdown={['locations']}\n                    countdown={this._tickCountdown}\n                />\n                {\n                    this.state.dataError === UNAUTHORIZED ?\n                    <Alert variant=\"danger\">\n                        Couldn't retrieve data from sever. Make sure your account is admin account!</Alert>\n                    :\n                    (\n                        this.state.dataError === NODATA ?\n                        <Alert variant=\"secondary\"> <h2>Data is empty!</h2></Alert> :\n                        <Chart options={this.state.options} series={this.props.optionsState.data} type='donut' />\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => (\n    {\n        optionsState: state.circleDashboard,\n        auth: state.auth\n    }\n)\n\nexport default connect(mapStateToProps)(Index);","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\nimport ApexChart from 'apexcharts';\nimport { secondaryDark, mainLight } from '../helpers/colors';\nimport ToolbarQuery from './APIToolbar';\nimport axios from 'axios';\nimport {Alert} from 'react-bootstrap';\nimport propTypes from 'prop-types';\nimport {baseURL, timestampKey, apiEndPoint} from '../helpers/config'\n\n\n\nimport { connect } from 'react-redux';\nimport store from '../redux/store';\nimport { setAPIOption, appendSeries, setData, setTimeCountdown } from '../redux/actions/dashboards';\nimport { extractDataByKey, serialData } from '../helpers/APIservices';\nimport { extractFromTimestamp } from '../helpers/timeParser';\n\nimport {NODATA, UNAUTHORIZED} from '../redux/actions/types';\n\n//state template\naxios.defaults.baseURL = baseURL;\n\nclass Index extends Component {\n\n    static propTypes = {\n        options : propTypes.shape({\n            duration: propTypes.arrayOf(propTypes.string),\n            limits: propTypes.arrayOf(propTypes.number),\n            timer: propTypes.arrayOf(propTypes.number),\n            views: propTypes.arrayOf(propTypes.string)\n        }),\n        chartName: propTypes.string\n    }\n\n    static defaultProps = {\n        options: {\n            durations: ['hour', 'day', 'month'],\n            limits: [7, 12, 24],\n            timer: [10, 60, 3600],\n            views: ['area', 'line'],\n        },\n        chartName: 'generalChart'\n\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataError: '',\n            countdown: '',\n            series: [],\n            optionsMixedChart: {\n                chart: {\n                    width: '100%',\n                    background: secondaryDark,\n                    id: this.props.chartName,\n                },\n                title: {\n                    text: 'Average customer rating over time',\n                    align: 'center'\n                },\n                colors: [mainLight],\n\n                stroke: {\n                    width: 2,\n                    opacity: 1,\n                    curve: 'smooth'\n                },\n                markers: {\n                    size: 0,\n                    strokeWidth: 1,\n                    strokeOpacity: 1,\n                    hover: {\n                        size: 4\n                    }\n                },\n                yaxis: {\n                    tickAmount: 5,\n                    min: 0,\n                    max: 5\n                },\n                grid: {\n                    borderColor: '#40475D',\n                },\n                theme: {\n                    mode: 'dark',\n                },\n\n                legend: {\n                    offsetX: 0,\n                    offsetY: -20,\n                    height: 30,\n                    markers: {\n                        width: 20,\n                        height: 10,\n                        radius: 12,\n                    }\n                },\n                fill: {\n                    opacity: 0.7\n                }\n            },\n        }\n\n    }\n\n\n    componentDidMount(props) {\n        this._tickCountdown = this.props.options.timer[0]\n        this._updateInterval = null\n\n        Object.keys(this.props.options).map((obj) => store.dispatch(setAPIOption(obj, this.props.options[obj][0], this.props.chartName)));\n        this.updateDataByType( 1, this.props.options['durations'][0], this.props.options['limits'][0])\n\n        //start updating\n        this.resetTimer()\n    }\n\n    resetSeries = () => {\n        ApexChart.exec(this.props.chartName, 'resetSeries')\n    }\n\n    updateDataByType = ( rated = null, duration = null, limit = null) => {\n        const dataFilterBy = 'avg'\n        axios.get(`${apiEndPoint}/${dataFilterBy}?`,\n            {\n                params: {\n                    rated: rated,\n                    duration: duration,\n                    limit: limit\n                },\n                headers: {\n                    \"Authorization\": `Bearer ${this.props.auth.token}`\n                }\n            })\n            .then(res => res.data.data)\n            .then(res => {\n                const data = extractDataByKey(res, 'average');\n                const timestamps = extractDataByKey(res, timestampKey);\n                const categories = extractFromTimestamp(timestamps, duration)\n                const series = serialData(data, 'rating AVG', store.getState().generalDashboard.views);\n                store.dispatch(appendSeries(series, this.props.chartName));\n                // update ApexChart\n                try {\n                    ApexChart.exec(this.props.chartName, 'updateOptions', {\n                        xaxis: {\n                            categories: categories\n                        }\n                    });\n                    ApexChart.exec(this.props.chartName, 'updateOptions', {\n                        yaxis: {\n                            min: 0,\n                            tickAmount: 5,\n                            max: 5\n                        }\n                    })\n                }\n                catch (err){}\n                store.dispatch(setData([series], this.props.chartName))\n                \n                //catching empty data\n                if(Math.max(...data) === 0)\n                    this.setState({\n                        dataError: NODATA\n                    })\n                else\n                    this.setState({\n                        dataError: ''\n                    })\n            })\n            .catch(err => {\n                if(err.response && err.response.status === 403){\n                    this.setState({\n                        dataError: UNAUTHORIZED\n                    })\n                }\n            })\n\n    }\n\n\n    updateCountdown = () => {\n        if (this._tickCountdown === 0) {\n            this.update();\n            this.resetTimer()\n        }\n        else\n            this._tickCountdown -= 1\n        store.dispatch(setTimeCountdown(this._tickCountdown, this.props.chartName))\n    }\n\n    resetTimer = () => {\n        if (this._updateInterval)\n            clearInterval(this._updateInterval);\n        this._tickCountdown = store.getState().generalDashboard.timer;\n        this._updateInterval = setInterval(this.updateCountdown, 1000);\n\n    }\n\n    update = () => {\n        this.updateDataByType(\n            1,\n            store.getState().generalDashboard.durations,\n            store.getState().generalDashboard.limits\n        )\n    }\n\n\n    optionChange = (option, value) => {\n        store.dispatch(setAPIOption(option, value, this.props.chartName));\n        this.update()\n        this.resetTimer()\n    }\n    componentWillUnmount(){\n        if(this._updateInterval)\n            clearInterval(this._updateInterval)\n    }\n\n    render(props) {\n        return (\n            <div style={{ borderRadius: 0, marginTop: 10, display: 'flex', flexDirection: 'column', background: secondaryDark, minHeight: '10vh', transition:'0.5s' , height:this.state.dataError === NODATA ? 'auto':'90vh' }}>\n                <ToolbarQuery onOptionChange={this.optionChange} options={this.props.options} selections={this.props.optionsState} countdown={this.props.optionsState.countdown} />\n                {\n                    this.state.dataError === UNAUTHORIZED ?\n                    <Alert variant=\"danger\">Couldn't retrieve data from sever. Make sure your account is admin account!</Alert> :\n                    (\n                        this.state.dataError === NODATA ?\n                        <Alert variant=\"secondary\">\n                            <h2>\n                                Data is empty!\n                            </h2>\n                        </Alert> :\n                        <Chart options={this.state.optionsMixedChart}\n                        series={this.props.optionsState.data}\n                        type='line' />\n                    )\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => (\n    {\n        optionsState: state.generalDashboard,\n        auth: state.auth\n    }\n)\nexport default connect(mapStateToProps)(Index);\n","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\nimport ApexChart from 'apexcharts';\nimport { secondaryDark} from '../helpers/colors';\nimport ToolbarQuery from './APIToolbar';\nimport axios from 'axios';\nimport propTypes from 'prop-types';\nimport {ratingColors, ratingWords, baseURL, timestampKey, apiEndPoint} from '../helpers/config'\n\nimport { connect } from 'react-redux';\nimport store from '../redux/store';\nimport { setAPIOption, appendSeries, setSeries, setTimeCountdown } from '../redux/actions/dashboards';\nimport { extractDataByKey, serialData} from '../helpers/APIservices';\nimport { extractFromTimestamp } from '../helpers/timeParser';\n\nimport { Alert } from 'react-bootstrap';\nimport { NODATA, UNAUTHORIZED } from '../redux/actions/types';\n\n\n//state template\naxios.defaults.baseURL = baseURL;\n\n\nclass Index extends Component {\n\n    static propTypes = {\n        options: propTypes.shape({\n            duration: propTypes.arrayOf(propTypes.string),\n            timer: propTypes.arrayOf(propTypes.number),\n            location: propTypes.arrayOf(propTypes.string),\n            views: propTypes.arrayOf(propTypes.string),\n        }),\n        series: propTypes.arrayOf(propTypes.shape(\n            {\n                name: propTypes.string,\n                data: propTypes.arrayOf(propTypes.number),\n                type: propTypes.oneOf(['column', 'area', 'line'])\n            }\n        )),\n        chartName: propTypes.string\n    }\n\n    static defaultProps = {\n        options: {\n            durations: ['hour', 'day', 'month'],\n            limits: [7, 12, 24],\n            timer: [10, 60, 3600],\n            views: ['column', 'area', 'line'],\n        },\n        series: [],\n        chartName: 'columnChart'\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataError: '',\n            locations: [],\n            series: [],\n            optionsMixedChart: {\n                chart: {\n                    width: '100%',\n                    background: secondaryDark,\n                    id: props.chartName,\n                },\n                title: {\n                    text: 'Total customer rating over time',\n                    align: 'center'\n                },\n                colors: ratingColors,\n                stroke: {\n                    width: 2,\n                    opacity: 1,\n                    curve: 'smooth'\n                },\n                markers: {\n                    size: 0,\n                    strokeWidth: 1,\n                    strokeOpacity: 1,\n                    hover: {\n                        size: 4\n                    }\n                },\n                yaxis: {\n                    tickAmount: 5,\n                    min: 0,\n                    max: 5\n                },\n                grid: {\n                    borderColor: '#40475D',\n                    xaxis: {\n                        lines: {\n                            show: true\n                        }\n                    },\n                },\n                theme: {\n                    mode: 'dark',\n                },\n                legend: {\n                    offsetX: 0,\n                    offsetY: -10,\n                    height: 50,\n                    markers: {\n                        width: 25,\n                        height: 20,\n                        radius: 5,\n                    }\n                },\n                fill: {\n                    opacity: 0.7\n                },\n                dataLabels: {\n                    enabled: false,\n                }\n            },\n        }\n\n    }\n\n\n    componentDidMount(props) {\n        this._tickCountdown = this.props.options.timer[0]\n        this._updateInterval = null\n        this.getLocations();\n        Object.keys(this.props.options).map((obj) => store.dispatch(setAPIOption(obj, this.props.options[obj][0], this.props.chartName)));\n        this.update()\n        this.resetTimer()\n    }\n\n    getLocations = () => {\n        var firstOption = 'all';\n        axios.get(`${apiEndPoint}/location?`,\n            {\n                params: {},\n                headers: {\n                    \"Authorization\": `Bearer ${this.props.auth.token}`\n                }\n            })\n            .then(res => res.data.data)\n            .then(data => {\n                this.props.options.locations = [firstOption].concat(extractDataByKey(data, 'location'));\n\n            })\n            .catch(err => {\n                if (err.response.status === 403) {\n                    this.setState({\n                        dataError: UNAUTHORIZED\n                    })\n                }\n            })\n    }\n\n\n    updateDataByType = (kind, type, duration, limit, location) => {\n        const keyMap = {\n            'avg': 'average',\n            'total': 'total',\n        }\n\n        axios.get(`${apiEndPoint}/${kind}?`,\n            {\n                params: {\n                    rated: type,\n                    duration: duration,\n                    limit: limit,\n                    location: location\n                },\n                headers: {\n                    \"Authorization\": `Bearer ${this.props.auth.token}`\n                }\n            })\n            .then(res => res.data.data)\n            .then(res => {\n                const data = extractDataByKey(res, keyMap[kind]);\n                const timestamps = extractDataByKey(res, timestampKey);\n                const categories = extractFromTimestamp(timestamps, duration)\n                const series = serialData(data, `${type}.  ${ratingWords[type - 1]}`, store.getState().columnDashboard.views);\n                if (this.props.optionsState.series.length <= 5) {\n                    store.dispatch(appendSeries(series, this.props.chartName));\n                }\n                // update ApexChart\n                try {\n                    ApexChart.exec(this.props.chartName, 'updateOptions', {\n                        xaxis: {\n                            categories: categories\n                        }\n                    });\n                    if (kind === 'avg') {\n                        ApexChart.exec(this.props.chartName, 'updateOptions', {\n                            yaxis: {\n                                min: 0,\n                                tickAmount: 5,\n                                max: 5\n                            }\n                        })\n                    }\n                    else {\n                        if (this.props.optionsState.series.length === 5) {\n                            ApexChart.exec(this.props.chartName, 'updateOptions', {\n                                yaxis: {\n                                    min: 0,\n                                    tickAmount: 5,\n                                    max: Math.max(...this.props.optionsState.series.map((obj) => Math.max(...obj.data)))\n                                }\n                            })\n                        }\n                    }\n                }\n                catch (err) {\n                    this.setState({\n                        optionsMixedChart: {\n                            ...this.state.optionsMixedChart,\n                            yaxis: {\n                                tickAmount: 5,\n                                min: 0,\n                                max: Math.max(...this.props.optionsState.series.map((obj) => Math.max(...obj.data)))\n                            }\n                        }\n                    })\n                }\n                if (this.props.optionsState.series.length === 5) {\n                    var newSeries = this.props.optionsState.series.sort((a, b) => (a.name > b.name) ? 1 : ((a.name < b.name) ? -1 : 0));\n                    this.setState({\n                        series: newSeries\n                    });\n\n                    if (Math.max(...newSeries.map(obj => Math.max(...obj.data))) === 0) {\n                        this.setState({\n                            dataError: NODATA\n                        })\n                    }\n                    else {\n                        this.setState({\n                            dataError: ''\n                        })\n                    }\n\n                }\n            })\n            .catch(err => {\n                if (err.response && err.response.status === 403) {\n                    this.setState({\n                        dataError: UNAUTHORIZED\n                    })\n                }\n            })\n\n\n    }\n\n    updateCountdown = () => {\n        if (this._tickCountdown === 0) {\n            this.update();\n            this.resetTimer()\n        }\n        else\n            this._tickCountdown -= 1\n        store.dispatch(setTimeCountdown(this._tickCountdown, this.props.chartName))\n    }\n\n    resetTimer = () => {\n        if (this._updateInterval)\n            clearInterval(this._updateInterval);\n        this._tickCountdown = store.getState().columnDashboard.timer;\n        this._updateInterval = setInterval(this.updateCountdown, 1000)\n    }\n\n    update = () => {\n        const overrideOptions = {\n            modes: 'total'\n        }\n        axios.all(\n            [1, 2, 3, 4, 5].map(rating => this.updateDataByType(\n                overrideOptions.modes,\n                rating,\n                store.getState().columnDashboard.durations,\n                store.getState().columnDashboard.limits,\n                store.getState().columnDashboard.locations === 'all' ? '' : store.getState().columnDashboard.locations,\n            ))\n        )\n            .then(res => store.dispatch(setSeries([], this.props.chartName)))\n\n    }\n\n    optionChange = (option, value) => {\n        store.dispatch(setAPIOption(option, value, this.props.chartName));\n        this.update()\n        this.resetTimer()\n    }\n\n    componentWillUnmount() {\n        if (this._updateInterval)\n            clearInterval(this._updateInterval)\n    }\n\n    render(props) {\n        return (\n            <div style={{ borderRadius: 0, marginTop: 10, display: 'flex', flexDirection: 'column', background: secondaryDark, minHeight: '10vh' }}>\n                <ToolbarQuery\n                    onOptionChange={this.optionChange}\n                    options={this.props.options}\n                    selections={this.props.optionsState}\n                    dropdown={['locations']}\n                    countdown={this.props.optionsState.countdown}\n                />\n                {\n                    this.state.dataError === UNAUTHORIZED ?\n                        <Alert variant=\"danger\">\n                            Couldn't retrieve data from sever. Make sure your account is admin account!\n                        </Alert>:\n                        (\n                            this.state.dataError === NODATA ?\n                            <Alert variant=\"secondary\">\n                                <h2>\n                                    Data is empty!\n                                </h2>\n                            </Alert> :\n                            <Chart options={this.state.optionsMixedChart} series={this.state.series} type='bar' />\n                        )\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => (\n    {\n        optionsState: state.columnDashboard,\n        auth: state.auth\n    }\n)\nexport default connect(mapStateToProps)(Index);\n","import React, { Component } from 'react';\nimport { Container, ListGroup, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLaughBeam, faSmile, faMeh, faFrown, faAngry } from '@fortawesome/free-solid-svg-icons';\nimport { secondaryDark, mainLight } from '../helpers/colors';\nimport { Alert } from 'react-bootstrap';\nimport {  ratingColors, ratingWords, baseURL } from '../helpers/config';\nimport propTypes from 'prop-types';\nimport { NODATA, UNAUTHORIZED } from '../redux/actions/types';\nimport axios from 'axios';\naxios.defaults.baseURL = baseURL;\n\n\nconst style = {\n    container: {\n        overflowY: 'scroll',\n        maxHeight: '20rem',\n        backgroundColor: secondaryDark,\n        color: '#aaaaaa'\n    }\n}\n\n\n\n\nconst sastisfactionIcon = [faAngry, faFrown, faMeh, faSmile, faLaughBeam];\n\nconst Comment = (props) => {\n    let d = new Date(props.date);\n\n    return <p > {d.toLocaleString()} <FontAwesomeIcon style={{color: ratingColors[props.rated-1]}}icon={sastisfactionIcon[props.rated - 1]} />\n     <span style={{color: ratingColors[props.rated-1]}}> ({ratingWords[props.rated-1]} ) {props.feedback} </span>\n     </p>\n}\n\nexport default class Index extends Component {\n    static propTypes = {\n        limitComment : propTypes.number\n    }\n    static defaultProps = {\n        limitComment : 20\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataError: '',\n            comments: []\n        }\n    }\n    componentDidMount() {\n        this.update()\n        this._updateInterval = setInterval(this.update, 2000);\n\n    }\n\n    update = () => {\n\n        axios.get(\n            'api/dashboard/comment?',\n            {\n                params: {\n                    limit: this.props.limitComment\n                },\n                headers: {\n                    \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n                }\n            }\n        )\n            .then(res => res.data.data)\n            .then(data => {\n                this.setState({ comments: data });\n                // this.state.comments.map(obj =>  <Comment rated={obj.rated} feedback={obj.comment} />  )\n                if (data.length === 0)\n                    this.setState({\n                        dataError: NODATA\n                    })\n                else\n                    this.setState({\n                        dataError: ''\n                    })\n            })\n            .catch(err => {\n                if(err.response && err.response.status === 403){\n                    this.setState({\n                        dataError: UNAUTHORIZED\n                    })\n                }\n            })\n    }\n\n    componentWillUnmount() {\n        if (this._updateInterval)\n            clearInterval(this._updateInterval)\n    }\n    render() {\n\n        return (\n            <Container >\n                <Row>\n                    <div style={{ position: 'sticky', top: 0, background: secondaryDark, width: '90%', height: '10%', color: mainLight }}>\n                        <h3> Recent comments </h3>\n                    </div>\n                </Row>\n                <Row style={{ ...style.container, maxHeight: '30vw' }}>\n                        {\n                            this.state.dataError === UNAUTHORIZED &&\n                            <Alert variant=\"danger\">\n                                Couldn't retrieve data from sever. Make sure your account is admin account!\n                            </Alert>\n                        }\n                        {\n                            this.state.dataError === NODATA ?\n                            <Alert variant=\"secondary\" style={{width:'100%'}}>\n                                <h2>\n                                Data is empty!\n                                </h2>\n                            </Alert> :\n                            <ListGroup variant='flush' >\n                                {this.state.comments.map((obj, ind) => <Comment date={obj.created_at} rated={obj.rated} feedback={obj.comment} key={ind} />)}\n                            </ListGroup>\n                        }\n                </Row>\n            </Container>\n        )\n    }\n}","import axios from 'axios';\nimport { USER_LOADING, USER_LOGOUT, LOGIN_SUCCESS, GET_ERROR, ADMIN_LOADED } from './types';\nimport { baseURL } from '../../helpers/config'\nimport { ERRORS_HEADING } from './error'\naxios.defaults.baseURL = baseURL;\n\n\nexport const loadAdmin = (_token) => (dispatch, getState) => {\n\n    dispatch({ type: USER_LOADING });\n    const token = _token ? _token : getState().auth.token;\n\n    axios.get('/api/auth/admin', {\n        params: {},\n        headers: {\n            'Content-Type': 'aplication/json',\n            'Authorization': `Bearer ${token}`\n        }\n    })\n        .then(res => {\n            dispatch({\n                type: ADMIN_LOADED,\n                payload: res.data\n            });\n        })\n        .catch(\n            err => {\n                if (!err.response)\n                    dispatch({\n                        type: GET_ERROR,\n                        payload: {\n                            [ERRORS_HEADING.severError]: 'Sever is not responding!'\n                        }\n                    })\n                else if (err.response.status === 403) {\n                    dispatch({\n                        type: GET_ERROR,\n                        payload: {\n                            [ERRORS_HEADING.loginFailed]: \"Account is not authorized\"\n                        }\n                    })\n                    dispatch({\n                        type: USER_LOGOUT\n                    })\n                }\n            }\n        )\n\n\n}\n\nexport const login = (username, password) => dispatch => {\n\n    axios.post(\n        'api/auth/login',\n        {\n            username: username,\n            password: password,\n        })\n        .then(res => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            });\n        })\n        .catch(err => {\n            if (!err.response)\n                dispatch({\n                    type: GET_ERROR,\n                    payload: {\n                        [ERRORS_HEADING.severError]: 'Sever is not responding!'\n                    }\n                })\n            else if (err.response.status === 400) {\n                dispatch({\n                    type: GET_ERROR,\n                    payload: {\n                        [ERRORS_HEADING.loginFailed]: \"Invalid login or password\"\n                    }\n                })\n            }\n        })\n        .then(\n            res =>\n                dispatch(loadAdmin())\n        )\n\n\n}\n\nexport const logout = () => (dispatch, getState) => {\n\n    dispatch({\n        type: USER_LOGOUT\n    })\n\n}","import React from 'react';\nimport { Col, Row, Container, Button} from 'react-bootstrap';\nimport { connect } from 'react-redux';\n// Charts\nimport PercentageChart from '../components/circleChart';\nimport LineChart from '../components/generalChart';\nimport ColumnChart from '../components/columnChart';\nimport CommentSection from '../components/CommentSection';\n\n\nimport { mainDark, secondaryDark, mainLight } from '../helpers/colors';\nimport {baseURL} from '../helpers/config'\nimport { Redirect } from 'react-router-dom';\n\nimport store from '../redux/store';\nimport { logout } from '../redux/actions/auth'\n\nimport axios from 'axios';\naxios.defaults.baseURL = baseURL;\n\n\n\n\n\n\nconst style = {\n    responsive: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    brand: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: 100,\n        color: '#aaaaaa',\n        fontFamily: 'Quantico',\n        background: secondaryDark,\n        margin: 5,\n        borderRadius: 10\n    },\n    btn: {\n        background: secondaryDark,\n        margin: 10,\n        borderRadius: 10,\n        minHeight: 100,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n\n}\nconst Index = (props) => {\n\n    return (\n        !props.isAuthenticated ?\n            <Redirect to='/login'></Redirect>\n            :\n            <Container fluid style={{ backgroundColor: mainDark }}>\n                <Row style={style.responsive}>\n                    <Col xs={9} md={9} xl={9} sm={9} lg={9} style={style.brand}>\n                        <h2 style={{ fontSize: '3vw', color: mainLight }}>NGUYEN KIM RATING DASHBOARD</h2>\n                    </Col>\n                    <Col xs={2} md={2} xl={2} sm={2} lg={2} style={style.btn}>\n                        <Button variant='outline-info' onClick={() => store.dispatch(logout())}>Logout</Button>\n                    </Col>\n                </Row>\n                <Row style={{ ...style.responsive }}>\n                    <Col xs={11} md={11} xl={5} sm={11} lg={5} style={{ border: `1px solid ${secondaryDark}`, background: secondaryDark, borderRadius: 10, margin: 10 }} >\n                        <PercentageChart />\n                    </Col>\n                    <Col xs={11} md={11} xl={5} sm={11} lg={5} style={{ border: `1px solid ${secondaryDark}`, background: secondaryDark, borderRadius: 10, margin: 10 }} >\n                        <LineChart />\n                    </Col>\n                    <Col xs={11} md={11} xl={10} sm={11} lg={10} style={{ border: `1px solid ${secondaryDark}`, background: secondaryDark, borderRadius: 10, margin: 10 }} >\n                        <ColumnChart></ColumnChart>\n                    </Col>\n                    <Col xs={11} md={11} xl={10} sm={11} lg={10} style={{ border: `1px solid ${secondaryDark}`, background: secondaryDark, borderRadius: 10, margin: 10 }} >\n                        <CommentSection></CommentSection>\n                    </Col>\n                </Row>\n            </Container>\n    );\n}\n\n\n\n\nconst mapStateToProps = (state) => (\n    {\n        isAuthenticated: state.auth.isAuthenticated\n    }\n)\nexport default connect(mapStateToProps)(Index);\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nexport const AlertError = (props) => (\n    props.display &&\n    <Alert variant=\"danger\" show={true} dismissible onClose={props.onClose} >\n        <Alert.Heading>{props.heading}</Alert.Heading>\n        <p>{props.text}</p>\n    </Alert>\n\n)\n\nexport const AlertSucceed = (props) => (\n    props.display &&\n    <Alert variant=\"success\" show={props.display} dismissible onClose={props.onClose} >\n        <Alert.Heading>{props.heading}</Alert.Heading>\n        <p>{props.text}</p>\n    </Alert>\n)","import React, { Component } from 'react';\nimport { Container, Row, Col, Form, Button, Alert } from 'react-bootstrap';\nimport { mainLight, secondaryDark, mainDark } from '../helpers/colors';\nimport {ERRORS_HEADING, returnError, clearMessages} from '../redux/actions/error'\nimport { AlertError } from '../components/Alerts'\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport store from '../redux/store';\nimport {login} from '../redux/actions/auth'\n\n\nconst style = {\n    responsive: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    brand: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: 80,\n        color: '#aaaaaa',\n        fontFamily: 'Quantico',\n        background: secondaryDark,\n        margin: '10px 20% 10px 20%',\n\n    },\n    text:{\n        color:'#dddddd'\n    }\n}\n\n\nclass Index extends Component {\n    constructor(){\n        super();\n        this.state = {\n            username: '',\n            password: '',\n        }\n    }\n\n\n    render(props) {\n        return (\n            this.props.isAuthenticated ?\n            <Redirect to='/'></Redirect>\n            :\n            <Container>\n                <Row style={style.responsive}>\n                    <Col xs={10} sm={10} md={12} lg={8} xl={8} style={{...style.brand}}>\n                        <h5 style={{ fontSize: '3vw', color: mainLight, whiteSpace:'nowrap' }}>NGUYENKIM RATING DASHBOARD</h5>\n                    </Col>\n                </Row>\n                \n                <Row style={style.responsive}>\n                \n                    <Col xs={10} sm={10} md={12} lg={8} xl={8} style={{background:secondaryDark,  padding: '5%'}}>\n                        <AlertError display={ERRORS_HEADING.loginFailed in this.props.messages.error} onClose={() => { store.dispatch(clearMessages()) }}  \n                                    heading={ERRORS_HEADING.loginFailed} \n                                    text={ this.props.messages.error ? this.props.messages.error[ERRORS_HEADING.loginFailed] : {}} />\n                        <AlertError display={ERRORS_HEADING.severError in this.props.messages.error} onClose={() => { store.dispatch(clearMessages()) }}  \n                                    heading={ERRORS_HEADING.severError} \n                                    text={ this.props.messages.error ? this.props.messages.error[ERRORS_HEADING.severError] : {}} />\n                        <Form fullWidth>\n                        <h1 style={{color:'#dddddd'}}>Login</h1>\n                            <Form.Group controlId=\"formBasicEmail\" lg>\n                                <Form.Label style={style.text}>Username</Form.Label>\n                                <Form.Control \n                                    type=\"text\" \n                                    placeholder=\"admin\" \n                                    size=\"lg\" \n                                    style={{backgroundColor: secondaryDark, color:'#ffffff'}}\n                                    value={this.state.username}\n                                    onChange={(e) => this.setState({username: e.target.value})}\n                                    />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword\" lg>\n                                <Form.Label style={style.text}>Password</Form.Label>\n                                <Form.Control \n                                    type=\"password\" \n                                    placeholder=\"password\" \n                                    size=\"lg\" \n                                    style={{backgroundColor: secondaryDark, color:'#ffffff'}}\n                                    value={this.state.password}\n                                    onChange={(e) => this.setState({password: e.target.value})}\n                                    />\n                            </Form.Group>\n\n                            <Button variant=\"info\" type=\"button\" onClick={() => store.dispatch(login(this.state.username, this.state.password))} >\n                                Submit\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: state.auth.isAuthenticated,\n        messages: state.messages\n    }\n}\n\nexport default connect(mapStateToProps)(Index);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from './views/Home';\nimport Login from './views/Login';\n\n\nimport store from './redux/store';\nimport {loadAdmin} from './redux/actions/auth'\n\n\n\nclass App extends Component {\n\n    componentDidMount(){\n        store.dispatch(loadAdmin())\n    };\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/login\" component={Login} />\n                    <Route exact path=\"/\" component={Home} />\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport store from './redux/store'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App></App>\n    </Provider> , \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}